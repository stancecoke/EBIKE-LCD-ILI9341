
TFT Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e08  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080081a8  080081a8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a8  080081a8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000007c  0800822c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  0800822c  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd5a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c0  00000000  00000000  0002fdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00033788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b6d  00000000  00000000  000345c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ede5  00000000  00000000  0004e12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000916cb  00000000  00000000  0005cf12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee5dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  000ee658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005388 	.word	0x08005388

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005388 	.word	0x08005388

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__gesf2>:
 8000368:	f04f 3cff 	mov.w	ip, #4294967295
 800036c:	e006      	b.n	800037c <__cmpsf2+0x4>
 800036e:	bf00      	nop

08000370 <__lesf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	e002      	b.n	800037c <__cmpsf2+0x4>
 8000376:	bf00      	nop

08000378 <__cmpsf2>:
 8000378:	f04f 0c01 	mov.w	ip, #1
 800037c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000384:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800038c:	bf18      	it	ne
 800038e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000392:	d011      	beq.n	80003b8 <__cmpsf2+0x40>
 8000394:	b001      	add	sp, #4
 8000396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039a:	bf18      	it	ne
 800039c:	ea90 0f01 	teqne	r0, r1
 80003a0:	bf58      	it	pl
 80003a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003a6:	bf88      	it	hi
 80003a8:	17c8      	asrhi	r0, r1, #31
 80003aa:	bf38      	it	cc
 80003ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b0:	bf18      	it	ne
 80003b2:	f040 0001 	orrne.w	r0, r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	d102      	bne.n	80003c4 <__cmpsf2+0x4c>
 80003be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c2:	d105      	bne.n	80003d0 <__cmpsf2+0x58>
 80003c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003c8:	d1e4      	bne.n	8000394 <__cmpsf2+0x1c>
 80003ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003ce:	d0e1      	beq.n	8000394 <__cmpsf2+0x1c>
 80003d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_cfrcmple>:
 80003d8:	4684      	mov	ip, r0
 80003da:	4608      	mov	r0, r1
 80003dc:	4661      	mov	r1, ip
 80003de:	e7ff      	b.n	80003e0 <__aeabi_cfcmpeq>

080003e0 <__aeabi_cfcmpeq>:
 80003e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e2:	f7ff ffc9 	bl	8000378 <__cmpsf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf48      	it	mi
 80003ea:	f110 0f00 	cmnmi.w	r0, #0
 80003ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f0 <__aeabi_fcmpeq>:
 80003f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f4:	f7ff fff4 	bl	80003e0 <__aeabi_cfcmpeq>
 80003f8:	bf0c      	ite	eq
 80003fa:	2001      	moveq	r0, #1
 80003fc:	2000      	movne	r0, #0
 80003fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000402:	bf00      	nop

08000404 <__aeabi_fcmplt>:
 8000404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000408:	f7ff ffea 	bl	80003e0 <__aeabi_cfcmpeq>
 800040c:	bf34      	ite	cc
 800040e:	2001      	movcc	r0, #1
 8000410:	2000      	movcs	r0, #0
 8000412:	f85d fb08 	ldr.w	pc, [sp], #8
 8000416:	bf00      	nop

08000418 <__aeabi_fcmple>:
 8000418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800041c:	f7ff ffe0 	bl	80003e0 <__aeabi_cfcmpeq>
 8000420:	bf94      	ite	ls
 8000422:	2001      	movls	r0, #1
 8000424:	2000      	movhi	r0, #0
 8000426:	f85d fb08 	ldr.w	pc, [sp], #8
 800042a:	bf00      	nop

0800042c <__aeabi_fcmpge>:
 800042c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000430:	f7ff ffd2 	bl	80003d8 <__aeabi_cfrcmple>
 8000434:	bf94      	ite	ls
 8000436:	2001      	movls	r0, #1
 8000438:	2000      	movhi	r0, #0
 800043a:	f85d fb08 	ldr.w	pc, [sp], #8
 800043e:	bf00      	nop

08000440 <__aeabi_fcmpgt>:
 8000440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000444:	f7ff ffc8 	bl	80003d8 <__aeabi_cfrcmple>
 8000448:	bf34      	ite	cc
 800044a:	2001      	movcc	r0, #1
 800044c:	2000      	movcs	r0, #0
 800044e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000452:	bf00      	nop

08000454 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b087      	sub	sp, #28
 8000458:	af00      	add	r7, sp, #0
 800045a:	4604      	mov	r4, r0
 800045c:	4608      	mov	r0, r1
 800045e:	4611      	mov	r1, r2
 8000460:	461a      	mov	r2, r3
 8000462:	4623      	mov	r3, r4
 8000464:	80fb      	strh	r3, [r7, #6]
 8000466:	4603      	mov	r3, r0
 8000468:	80bb      	strh	r3, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	807b      	strh	r3, [r7, #2]
 800046e:	4613      	mov	r3, r2
 8000470:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000482:	f04f 0300 	mov.w	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000488:	887a      	ldrh	r2, [r7, #2]
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff16 	bl	80002c0 <__aeabi_i2f>
 8000494:	4603      	mov	r3, r0
 8000496:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	68f8      	ldr	r0, [r7, #12]
 800049e:	f7ff ffb1 	bl	8000404 <__aeabi_fcmplt>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80004a8:	2301      	movs	r3, #1
 80004aa:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80004b2:	883a      	ldrh	r2, [r7, #0]
 80004b4:	88bb      	ldrh	r3, [r7, #4]
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff01 	bl	80002c0 <__aeabi_i2f>
 80004be:	4603      	mov	r3, r0
 80004c0:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80004c2:	f04f 0100 	mov.w	r1, #0
 80004c6:	68f8      	ldr	r0, [r7, #12]
 80004c8:	f7ff ff9c 	bl	8000404 <__aeabi_fcmplt>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80004d2:	2301      	movs	r3, #1
 80004d4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80004d6:	7cfb      	ldrb	r3, [r7, #19]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d104      	bne.n	80004e6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80004dc:	887a      	ldrh	r2, [r7, #2]
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	82fb      	strh	r3, [r7, #22]
 80004e4:	e003      	b.n	80004ee <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80004e6:	88fa      	ldrh	r2, [r7, #6]
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80004ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004f0:	8afa      	ldrh	r2, [r7, #22]
 80004f2:	88b9      	ldrh	r1, [r7, #4]
 80004f4:	88f8      	ldrh	r0, [r7, #6]
 80004f6:	f000 fe5b 	bl	80011b0 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80004fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004fc:	8afa      	ldrh	r2, [r7, #22]
 80004fe:	8839      	ldrh	r1, [r7, #0]
 8000500:	88f8      	ldrh	r0, [r7, #6]
 8000502:	f000 fe55 	bl	80011b0 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000506:	7cbb      	ldrb	r3, [r7, #18]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d104      	bne.n	8000516 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800050c:	883a      	ldrh	r2, [r7, #0]
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	82bb      	strh	r3, [r7, #20]
 8000514:	e003      	b.n	800051e <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000516:	88ba      	ldrh	r2, [r7, #4]
 8000518:	883b      	ldrh	r3, [r7, #0]
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800051e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000520:	8aba      	ldrh	r2, [r7, #20]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f000 fe87 	bl	8001238 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800052a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800052c:	8aba      	ldrh	r2, [r7, #20]
 800052e:	88b9      	ldrh	r1, [r7, #4]
 8000530:	8878      	ldrh	r0, [r7, #2]
 8000532:	f000 fe81 	bl	8001238 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800053c:	8abb      	ldrh	r3, [r7, #20]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d005      	beq.n	800054e <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000542:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000544:	8839      	ldrh	r1, [r7, #0]
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fcf9 	bl	8000f40 <ILI9341_Draw_Pixel>
	}
	
}
 800054e:	bf00      	nop
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}

08000556 <ILI9341_Draw_Filled_Rectangle_Coord>:
/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000556:	b590      	push	{r4, r7, lr}
 8000558:	b089      	sub	sp, #36	; 0x24
 800055a:	af02      	add	r7, sp, #8
 800055c:	4604      	mov	r4, r0
 800055e:	4608      	mov	r0, r1
 8000560:	4611      	mov	r1, r2
 8000562:	461a      	mov	r2, r3
 8000564:	4623      	mov	r3, r4
 8000566:	80fb      	strh	r3, [r7, #6]
 8000568:	4603      	mov	r3, r0
 800056a:	80bb      	strh	r3, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
 8000570:	4613      	mov	r3, r2
 8000572:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000590:	887a      	ldrh	r2, [r7, #2]
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	2b00      	cmp	r3, #0
 800059c:	da01      	bge.n	80005a2 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800059e:	2301      	movs	r3, #1
 80005a0:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80005a6:	883a      	ldrh	r2, [r7, #0]
 80005a8:	88bb      	ldrh	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da01      	bge.n	80005b8 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80005b4:	2301      	movs	r3, #1
 80005b6:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80005b8:	7cfb      	ldrb	r3, [r7, #19]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d106      	bne.n	80005cc <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80005be:	887a      	ldrh	r2, [r7, #2]
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	823b      	strh	r3, [r7, #16]
 80005ca:	e005      	b.n	80005d8 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80005cc:	88fa      	ldrh	r2, [r7, #6]
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80005d8:	7cbb      	ldrb	r3, [r7, #18]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d106      	bne.n	80005ec <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80005de:	883a      	ldrh	r2, [r7, #0]
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	e005      	b.n	80005f8 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80005ec:	88ba      	ldrh	r2, [r7, #4]
 80005ee:	883b      	ldrh	r3, [r7, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80005f4:	883b      	ldrh	r3, [r7, #0]
 80005f6:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80005f8:	8abc      	ldrh	r4, [r7, #20]
 80005fa:	8afa      	ldrh	r2, [r7, #22]
 80005fc:	89f9      	ldrh	r1, [r7, #14]
 80005fe:	8a38      	ldrh	r0, [r7, #16]
 8000600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4623      	mov	r3, r4
 8000606:	f000 fd75 	bl	80010f4 <ILI9341_Draw_Rectangle>
}
 800060a:	bf00      	nop
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd90      	pop	{r4, r7, pc}

08000612 <ILI9341_DrawText>:
/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/


void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b08a      	sub	sp, #40	; 0x28
 8000616:	af02      	add	r7, sp, #8
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	4611      	mov	r1, r2
 800061e:	461a      	mov	r2, r3
 8000620:	460b      	mov	r3, r1
 8000622:	80fb      	strh	r3, [r7, #6]
 8000624:	4613      	mov	r3, r2
 8000626:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint16_t fOffset = font[0];	/* Offset of character */
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	83fb      	strh	r3, [r7, #30]
	uint8_t fWidth = font[1];	/* Width of font */
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	777b      	strb	r3, [r7, #29]
	//fOffset=337;
	while (*str)
 8000634:	e02d      	b.n	8000692 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, Colour, Background_Colour);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	7818      	ldrb	r0, [r3, #0]
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	460b      	mov	r3, r1
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	f000 f82a 	bl	80006a2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint16_t *tempChar = (uint16_t*)&font[((*str - 0x20) * fOffset) + 4];
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3b20      	subs	r3, #32
 8000654:	8bfa      	ldrh	r2, [r7, #30]
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	3304      	adds	r3, #4
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	1c9a      	adds	r2, r3, #2
 800066c:	7f7b      	ldrb	r3, [r7, #29]
 800066e:	429a      	cmp	r2, r3
 8000670:	da07      	bge.n	8000682 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000672:	7dfb      	ldrb	r3, [r7, #23]
 8000674:	b29a      	uxth	r2, r3
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	b29b      	uxth	r3, r3
 800067c:	3302      	adds	r3, #2
 800067e:	80fb      	strh	r3, [r7, #6]
 8000680:	e004      	b.n	800068c <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8000682:	7f7b      	ldrb	r3, [r7, #29]
 8000684:	b29a      	uxth	r2, r3
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4413      	add	r3, r2
 800068a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1cd      	bne.n	8000636 <ILI9341_DrawText+0x24>
	}
}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <ILI9341_DrawChar>:
void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 80006a2:	b590      	push	{r4, r7, lr}
 80006a4:	b08d      	sub	sp, #52	; 0x34
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	460b      	mov	r3, r1
 80006b4:	81bb      	strh	r3, [r7, #12]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b1e      	cmp	r3, #30
 80006be:	d96a      	bls.n	8000796 <ILI9341_DrawChar+0xf4>
 80006c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db66      	blt.n	8000796 <ILI9341_DrawChar+0xf4>

	uint16_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	83fb      	strh	r3, [r7, #30]
	//fOffset=337;
	fWidth = font[1];
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	83bb      	strh	r3, [r7, #28]
	fHeight = font[2];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3302      	adds	r3, #2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	837b      	strh	r3, [r7, #26]
	fBPL = font[3];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	3303      	adds	r3, #3
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	833b      	strh	r3, [r7, #24]
	uint16_t temp;

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	3b20      	subs	r3, #32
 80006ea:	8bfa      	ldrh	r2, [r7, #30]
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	3304      	adds	r3, #4
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	4413      	add	r3, r2
 80006f6:	617b      	str	r3, [r7, #20]

	/* Clear background first */
	ILI9341_Draw_Rectangle(X, Y, fWidth+4, fHeight, Background_Colour);
 80006f8:	8bbb      	ldrh	r3, [r7, #28]
 80006fa:	3304      	adds	r3, #4
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	8b7c      	ldrh	r4, [r7, #26]
 8000700:	88f9      	ldrh	r1, [r7, #6]
 8000702:	89b8      	ldrh	r0, [r7, #12]
 8000704:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4623      	mov	r3, r4
 800070a:	f000 fcf3 	bl	80010f4 <ILI9341_Draw_Rectangle>

	for (int j=0; j < fHeight; j++)
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
 8000712:	e03b      	b.n	800078c <ILI9341_DrawChar+0xea>
	{
		for (int i=0; i < fWidth; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
 8000718:	e031      	b.n	800077e <ILI9341_DrawChar+0xdc>
		{temp=fBPL * i + ((j & 0xF8) >> 3);
 800071a:	6a3b      	ldr	r3, [r7, #32]
 800071c:	b29b      	uxth	r3, r3
 800071e:	8b3a      	ldrh	r2, [r7, #24]
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	10db      	asrs	r3, r3, #3
 800072a:	b29b      	uxth	r3, r3
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	b29b      	uxth	r3, r3
 8000732:	4413      	add	r3, r2
 8000734:	827b      	strh	r3, [r7, #18]
			uint8_t z =  tempChar[ temp  + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000736:	8a7b      	ldrh	r3, [r7, #18]
 8000738:	3301      	adds	r3, #1
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	747b      	strb	r3, [r7, #17]
			uint8_t b = 1 << (j & 0x07);
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2201      	movs	r2, #1
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	743b      	strb	r3, [r7, #16]
			if (( z & b ) != 0x00)
 8000750:	7c7a      	ldrb	r2, [r7, #17]
 8000752:	7c3b      	ldrb	r3, [r7, #16]
 8000754:	4013      	ands	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00d      	beq.n	8000778 <ILI9341_DrawChar+0xd6>
			{
				ILI9341_Draw_Pixel(X+i, Y+j, Colour);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	b29a      	uxth	r2, r3
 8000760:	89bb      	ldrh	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	b298      	uxth	r0, r3
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	b29a      	uxth	r2, r3
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	4413      	add	r3, r2
 800076e:	b29b      	uxth	r3, r3
 8000770:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000772:	4619      	mov	r1, r3
 8000774:	f000 fbe4 	bl	8000f40 <ILI9341_Draw_Pixel>
		for (int i=0; i < fWidth; i++)
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	3301      	adds	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
 800077e:	8bbb      	ldrh	r3, [r7, #28]
 8000780:	6a3a      	ldr	r2, [r7, #32]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbc9      	blt.n	800071a <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	3301      	adds	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
 800078c:	8b7b      	ldrh	r3, [r7, #26]
 800078e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000790:	429a      	cmp	r2, r3
 8000792:	dbbf      	blt.n	8000714 <ILI9341_DrawChar+0x72>
 8000794:	e000      	b.n	8000798 <ILI9341_DrawChar+0xf6>
	if ((ch < 31) || (ch > 127)) return;
 8000796:	bf00      	nop
			}
		}
	}
}
 8000798:	372c      	adds	r7, #44	; 0x2c
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}

0800079e <ILI9341_DrawBigNumber>:

void ILI9341_DrawBigNumber(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b08a      	sub	sp, #40	; 0x28
 80007a2:	af02      	add	r7, sp, #8
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	4611      	mov	r1, r2
 80007aa:	461a      	mov	r2, r3
 80007ac:	460b      	mov	r3, r1
 80007ae:	80fb      	strh	r3, [r7, #6]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint16_t fOffset = (font[0]<<8)+font[1];	/* Offset of character */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b29a      	uxth	r2, r3
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	83fb      	strh	r3, [r7, #30]
	uint8_t fWidth = font[2];	/* Width of font */
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	777b      	strb	r3, [r7, #29]

	while (*str)
 80007d0:	e02d      	b.n	800082e <ILI9341_DrawBigNumber+0x90>
	{
		ILI9341_DrawBigNumericalCharakter(*str, font, X, Y, Colour, Background_Colour);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	7818      	ldrb	r0, [r3, #0]
 80007d6:	88b9      	ldrh	r1, [r7, #4]
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	460b      	mov	r3, r1
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	f000 f82a 	bl	800083e <ILI9341_DrawBigNumericalCharakter>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x30) * fOffset) + 5];
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3b30      	subs	r3, #48	; 0x30
 80007f0:	8bfa      	ldrh	r2, [r7, #30]
 80007f2:	fb02 f303 	mul.w	r3, r2, r3
 80007f6:	3305      	adds	r3, #5
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	1c9a      	adds	r2, r3, #2
 8000808:	7f7b      	ldrb	r3, [r7, #29]
 800080a:	429a      	cmp	r2, r3
 800080c:	da07      	bge.n	800081e <ILI9341_DrawBigNumber+0x80>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800080e:	7dfb      	ldrb	r3, [r7, #23]
 8000810:	b29a      	uxth	r2, r3
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	4413      	add	r3, r2
 8000816:	b29b      	uxth	r3, r3
 8000818:	3302      	adds	r3, #2
 800081a:	80fb      	strh	r3, [r7, #6]
 800081c:	e004      	b.n	8000828 <ILI9341_DrawBigNumber+0x8a>
		}
		else
		{
			X += fWidth;
 800081e:	7f7b      	ldrb	r3, [r7, #29]
 8000820:	b29a      	uxth	r2, r3
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	4413      	add	r3, r2
 8000826:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1cd      	bne.n	80007d2 <ILI9341_DrawBigNumber+0x34>
	}
}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <ILI9341_DrawBigNumericalCharakter>:

void ILI9341_DrawBigNumericalCharakter(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 800083e:	b590      	push	{r4, r7, lr}
 8000840:	b08f      	sub	sp, #60	; 0x3c
 8000842:	af02      	add	r7, sp, #8
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4611      	mov	r1, r2
 8000848:	461a      	mov	r2, r3
 800084a:	4603      	mov	r3, r0
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	460b      	mov	r3, r1
 8000850:	81bb      	strh	r3, [r7, #12]
 8000852:	4613      	mov	r3, r2
 8000854:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b1e      	cmp	r3, #30
 800085a:	d973      	bls.n	8000944 <ILI9341_DrawBigNumericalCharakter+0x106>
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db6f      	blt.n	8000944 <ILI9341_DrawBigNumericalCharakter+0x106>

	uint16_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = (font[0]<<8)+font[1];
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b29b      	uxth	r3, r3
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b29a      	uxth	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3301      	adds	r3, #1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4413      	add	r3, r2
 8000878:	83fb      	strh	r3, [r7, #30]

	fWidth = font[2];
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	3302      	adds	r3, #2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	83bb      	strh	r3, [r7, #28]
	fHeight = font[3];
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3303      	adds	r3, #3
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	837b      	strh	r3, [r7, #26]
	fBPL = font[4];
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3304      	adds	r3, #4
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	833b      	strh	r3, [r7, #24]


	tempChar = (uint8_t*)&font[((ch - 0x30) * fOffset) + 6]; // Current Character = Meta + (Character Index * Offset) Zeiger auf das gewünschte Zeichen
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	3b30      	subs	r3, #48	; 0x30
 8000896:	8bfa      	ldrh	r2, [r7, #30]
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	3306      	adds	r3, #6
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Clear background first */
	ILI9341_Draw_Rectangle(X, Y, fWidth+4, fHeight, Background_Colour);
 80008a4:	8bbb      	ldrh	r3, [r7, #28]
 80008a6:	3304      	adds	r3, #4
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	8b7c      	ldrh	r4, [r7, #26]
 80008ac:	88f9      	ldrh	r1, [r7, #6]
 80008ae:	89b8      	ldrh	r0, [r7, #12]
 80008b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4623      	mov	r3, r4
 80008b8:	f000 fc1c 	bl	80010f4 <ILI9341_Draw_Rectangle>
			uint8_t z =  tempChar[i]; // (j & 0xF8) >> 3, increase one by 8-bits
			uint8_t b = 1 << (j & 0x07);
			*/

	//Idee: Spaltenweise abarbeiten
	for (int i=0; i < fWidth; i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
 80008c0:	e03b      	b.n	800093a <ILI9341_DrawBigNumericalCharakter+0xfc>
		for(int j=0; j < fBPL; j++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
 80008c6:	e02d      	b.n	8000924 <ILI9341_DrawBigNumericalCharakter+0xe6>
			uint8_t z =  tempChar[j];
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	75fb      	strb	r3, [r7, #23]
			for(int k=0; k < 8; k++){
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
 80008d6:	e01f      	b.n	8000918 <ILI9341_DrawBigNumericalCharakter+0xda>
				 if ((z>>k)&1)
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	fa42 f303 	asr.w	r3, r2, r3
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d014      	beq.n	8000912 <ILI9341_DrawBigNumericalCharakter+0xd4>
				{
					ILI9341_Draw_Pixel(X+i, Y+8*j+k, Colour);
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	89bb      	ldrh	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	b298      	uxth	r0, r3
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	4413      	add	r3, r2
 80008fe:	b29a      	uxth	r2, r3
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800090c:	4619      	mov	r1, r3
 800090e:	f000 fb17 	bl	8000f40 <ILI9341_Draw_Pixel>
			for(int k=0; k < 8; k++){
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	3301      	adds	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	2b07      	cmp	r3, #7
 800091c:	dddc      	ble.n	80008d8 <ILI9341_DrawBigNumericalCharakter+0x9a>
		for(int j=0; j < fBPL; j++){
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	3301      	adds	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
 8000924:	8b3b      	ldrh	r3, [r7, #24]
 8000926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000928:	429a      	cmp	r2, r3
 800092a:	dbcd      	blt.n	80008c8 <ILI9341_DrawBigNumericalCharakter+0x8a>
				}
			}
		}
		tempChar += fBPL;
 800092c:	8b3b      	ldrh	r3, [r7, #24]
 800092e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000930:	4413      	add	r3, r2
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i=0; i < fWidth; i++){
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	3301      	adds	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
 800093a:	8bbb      	ldrh	r3, [r7, #28]
 800093c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800093e:	429a      	cmp	r2, r3
 8000940:	dbbf      	blt.n	80008c2 <ILI9341_DrawBigNumericalCharakter+0x84>
 8000942:	e000      	b.n	8000946 <ILI9341_DrawBigNumericalCharakter+0x108>
	if ((ch < 31) || (ch > 127)) return;
 8000944:	bf00      	nop
	}
}
 8000946:	3734      	adds	r7, #52	; 0x34
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
MX_SPI2_Init();																							//SPI INIT
 8000950:	f001 f892 	bl	8001a78 <MX_SPI2_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000954:	f000 fd2e 	bl	80013b4 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	4802      	ldr	r0, [pc, #8]	; (8000968 <ILI9341_SPI_Init+0x1c>)
 8000960:	f002 f8fc 	bl	8002b5c <HAL_GPIO_WritePin>
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010c00 	.word	0x40010c00

0800096c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000976:	1df9      	adds	r1, r7, #7
 8000978:	2301      	movs	r3, #1
 800097a:	2201      	movs	r2, #1
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <ILI9341_SPI_Send+0x20>)
 800097e:	f003 fc6d 	bl	800425c <HAL_SPI_Transmit>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000160 	.word	0x20000160

08000990 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <ILI9341_Write_Command+0x40>)
 80009a2:	f002 f8db 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <ILI9341_Write_Command+0x40>)
 80009ae:	f002 f8d5 	bl	8002b5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffd9 	bl	800096c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <ILI9341_Write_Command+0x40>)
 80009c2:	f002 f8cb 	bl	8002b5c <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <ILI9341_Write_Data+0x40>)
 80009e6:	f002 f8b9 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <ILI9341_Write_Data+0x40>)
 80009f2:	f002 f8b3 	bl	8002b5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffb7 	bl	800096c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <ILI9341_Write_Data+0x40>)
 8000a06:	f002 f8a9 	bl	8002b5c <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4604      	mov	r4, r0
 8000a20:	4608      	mov	r0, r1
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	4623      	mov	r3, r4
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80bb      	strh	r3, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	807b      	strh	r3, [r7, #2]
 8000a32:	4613      	mov	r3, r2
 8000a34:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a36:	202a      	movs	r0, #42	; 0x2a
 8000a38:	f7ff ffaa 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffc5 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffc0 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffb9 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffb4 	bl	80009d4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000a6c:	202b      	movs	r0, #43	; 0x2b
 8000a6e:	f7ff ff8f 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffaa 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffa5 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff9e 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000a98:	883b      	ldrh	r3, [r7, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff99 	bl	80009d4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000aa2:	202c      	movs	r0, #44	; 0x2c
 8000aa4:	f7ff ff74 	bl	8000990 <ILI9341_Write_Command>
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <ILI9341_Reset+0x34>)
 8000aba:	f002 f84f 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000abe:	20c8      	movs	r0, #200	; 0xc8
 8000ac0:	f001 f9dc 	bl	8001e7c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <ILI9341_Reset+0x34>)
 8000acc:	f002 f846 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ad0:	20c8      	movs	r0, #200	; 0xc8
 8000ad2:	f001 f9d3 	bl	8001e7c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <ILI9341_Reset+0x34>)
 8000adc:	f002 f83e 	bl	8002b5c <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000af6:	2036      	movs	r0, #54	; 0x36
 8000af8:	f7ff ff4a 	bl	8000990 <ILI9341_Write_Command>
HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 f9bd 	bl	8001e7c <HAL_Delay>
	
switch(screen_rotation) 
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d837      	bhi.n	8000b78 <ILI9341_Set_Rotation+0x90>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <ILI9341_Set_Rotation+0x28>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b37 	.word	0x08000b37
 8000b18:	08000b4d 	.word	0x08000b4d
 8000b1c:	08000b63 	.word	0x08000b63
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b20:	2048      	movs	r0, #72	; 0x48
 8000b22:	f7ff ff57 	bl	80009d4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <ILI9341_Set_Rotation+0x9c>)
 8000b28:	22f0      	movs	r2, #240	; 0xf0
 8000b2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <ILI9341_Set_Rotation+0xa0>)
 8000b2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b32:	801a      	strh	r2, [r3, #0]
			break;
 8000b34:	e021      	b.n	8000b7a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f7ff ff4c 	bl	80009d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <ILI9341_Set_Rotation+0x9c>)
 8000b3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b42:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <ILI9341_Set_Rotation+0xa0>)
 8000b46:	22f0      	movs	r2, #240	; 0xf0
 8000b48:	801a      	strh	r2, [r3, #0]
			break;
 8000b4a:	e016      	b.n	8000b7a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000b4c:	2088      	movs	r0, #136	; 0x88
 8000b4e:	f7ff ff41 	bl	80009d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <ILI9341_Set_Rotation+0x9c>)
 8000b54:	22f0      	movs	r2, #240	; 0xf0
 8000b56:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <ILI9341_Set_Rotation+0xa0>)
 8000b5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b5e:	801a      	strh	r2, [r3, #0]
			break;
 8000b60:	e00b      	b.n	8000b7a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000b62:	20e8      	movs	r0, #232	; 0xe8
 8000b64:	f7ff ff36 	bl	80009d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <ILI9341_Set_Rotation+0x9c>)
 8000b6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b6e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <ILI9341_Set_Rotation+0xa0>)
 8000b72:	22f0      	movs	r2, #240	; 0xf0
 8000b74:	801a      	strh	r2, [r3, #0]
			break;
 8000b76:	e000      	b.n	8000b7a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000b78:	bf00      	nop
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000002 	.word	0x20000002
 8000b88:	20000000 	.word	0x20000000

08000b8c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <ILI9341_Enable+0x14>)
 8000b96:	f001 ffe1 	bl	8002b5c <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000ba8:	f7ff fff0 	bl	8000b8c <ILI9341_Enable>
ILI9341_SPI_Init();
 8000bac:	f7ff fece 	bl	800094c <ILI9341_SPI_Init>
ILI9341_Reset();
 8000bb0:	f7ff ff7e 	bl	8000ab0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff feeb 	bl	8000990 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbe:	f001 f95d 	bl	8001e7c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000bc2:	20cb      	movs	r0, #203	; 0xcb
 8000bc4:	f7ff fee4 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000bc8:	2039      	movs	r0, #57	; 0x39
 8000bca:	f7ff ff03 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000bce:	202c      	movs	r0, #44	; 0x2c
 8000bd0:	f7ff ff00 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fefd 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000bda:	2034      	movs	r0, #52	; 0x34
 8000bdc:	f7ff fefa 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fef7 	bl	80009d4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000be6:	20cf      	movs	r0, #207	; 0xcf
 8000be8:	f7ff fed2 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fef1 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000bf2:	20c1      	movs	r0, #193	; 0xc1
 8000bf4:	f7ff feee 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000bf8:	2030      	movs	r0, #48	; 0x30
 8000bfa:	f7ff feeb 	bl	80009d4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000bfe:	20e8      	movs	r0, #232	; 0xe8
 8000c00:	f7ff fec6 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000c04:	2085      	movs	r0, #133	; 0x85
 8000c06:	f7ff fee5 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fee2 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c10:	2078      	movs	r0, #120	; 0x78
 8000c12:	f7ff fedf 	bl	80009d4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c16:	20ea      	movs	r0, #234	; 0xea
 8000c18:	f7ff feba 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fed9 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fed6 	bl	80009d4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c28:	20ed      	movs	r0, #237	; 0xed
 8000c2a:	f7ff feb1 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c2e:	2064      	movs	r0, #100	; 0x64
 8000c30:	f7ff fed0 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f7ff fecd 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f7ff feca 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000c40:	2081      	movs	r0, #129	; 0x81
 8000c42:	f7ff fec7 	bl	80009d4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000c46:	20f7      	movs	r0, #247	; 0xf7
 8000c48:	f7ff fea2 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	f7ff fec1 	bl	80009d4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000c52:	20c0      	movs	r0, #192	; 0xc0
 8000c54:	f7ff fe9c 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000c58:	2023      	movs	r0, #35	; 0x23
 8000c5a:	f7ff febb 	bl	80009d4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000c5e:	20c1      	movs	r0, #193	; 0xc1
 8000c60:	f7ff fe96 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000c64:	2010      	movs	r0, #16
 8000c66:	f7ff feb5 	bl	80009d4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000c6a:	20c5      	movs	r0, #197	; 0xc5
 8000c6c:	f7ff fe90 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000c70:	203e      	movs	r0, #62	; 0x3e
 8000c72:	f7ff feaf 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f7ff feac 	bl	80009d4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000c7c:	20c7      	movs	r0, #199	; 0xc7
 8000c7e:	f7ff fe87 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000c82:	2086      	movs	r0, #134	; 0x86
 8000c84:	f7ff fea6 	bl	80009d4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000c88:	2036      	movs	r0, #54	; 0x36
 8000c8a:	f7ff fe81 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000c8e:	2048      	movs	r0, #72	; 0x48
 8000c90:	f7ff fea0 	bl	80009d4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000c94:	203a      	movs	r0, #58	; 0x3a
 8000c96:	f7ff fe7b 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000c9a:	2055      	movs	r0, #85	; 0x55
 8000c9c:	f7ff fe9a 	bl	80009d4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000ca0:	20b1      	movs	r0, #177	; 0xb1
 8000ca2:	f7ff fe75 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fe94 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000cac:	2018      	movs	r0, #24
 8000cae:	f7ff fe91 	bl	80009d4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000cb2:	20b6      	movs	r0, #182	; 0xb6
 8000cb4:	f7ff fe6c 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000cb8:	2008      	movs	r0, #8
 8000cba:	f7ff fe8b 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000cbe:	2082      	movs	r0, #130	; 0x82
 8000cc0:	f7ff fe88 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000cc4:	2027      	movs	r0, #39	; 0x27
 8000cc6:	f7ff fe85 	bl	80009d4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000cca:	20f2      	movs	r0, #242	; 0xf2
 8000ccc:	f7ff fe60 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fe7f 	bl	80009d4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000cd6:	2026      	movs	r0, #38	; 0x26
 8000cd8:	f7ff fe5a 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fe79 	bl	80009d4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000ce2:	20e0      	movs	r0, #224	; 0xe0
 8000ce4:	f7ff fe54 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f7ff fe73 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cee:	2031      	movs	r0, #49	; 0x31
 8000cf0:	f7ff fe70 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000cf4:	202b      	movs	r0, #43	; 0x2b
 8000cf6:	f7ff fe6d 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000cfa:	200c      	movs	r0, #12
 8000cfc:	f7ff fe6a 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d00:	200e      	movs	r0, #14
 8000d02:	f7ff fe67 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d06:	2008      	movs	r0, #8
 8000d08:	f7ff fe64 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000d0c:	204e      	movs	r0, #78	; 0x4e
 8000d0e:	f7ff fe61 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d12:	20f1      	movs	r0, #241	; 0xf1
 8000d14:	f7ff fe5e 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d18:	2037      	movs	r0, #55	; 0x37
 8000d1a:	f7ff fe5b 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f7ff fe58 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f7ff fe55 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f7ff fe52 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d30:	200e      	movs	r0, #14
 8000d32:	f7ff fe4f 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000d36:	2009      	movs	r0, #9
 8000d38:	f7ff fe4c 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fe49 	bl	80009d4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000d42:	20e1      	movs	r0, #225	; 0xe1
 8000d44:	f7ff fe24 	bl	8000990 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fe43 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d4e:	200e      	movs	r0, #14
 8000d50:	f7ff fe40 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000d54:	2014      	movs	r0, #20
 8000d56:	f7ff fe3d 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff fe3a 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000d60:	2011      	movs	r0, #17
 8000d62:	f7ff fe37 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f7ff fe34 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d6c:	2031      	movs	r0, #49	; 0x31
 8000d6e:	f7ff fe31 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000d72:	20c1      	movs	r0, #193	; 0xc1
 8000d74:	f7ff fe2e 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000d78:	2048      	movs	r0, #72	; 0x48
 8000d7a:	f7ff fe2b 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d7e:	2008      	movs	r0, #8
 8000d80:	f7ff fe28 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d84:	200f      	movs	r0, #15
 8000d86:	f7ff fe25 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d8a:	200c      	movs	r0, #12
 8000d8c:	f7ff fe22 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d90:	2031      	movs	r0, #49	; 0x31
 8000d92:	f7ff fe1f 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000d96:	2036      	movs	r0, #54	; 0x36
 8000d98:	f7ff fe1c 	bl	80009d4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f7ff fe19 	bl	80009d4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000da2:	2011      	movs	r0, #17
 8000da4:	f7ff fdf4 	bl	8000990 <ILI9341_Write_Command>
HAL_Delay(120);
 8000da8:	2078      	movs	r0, #120	; 0x78
 8000daa:	f001 f867 	bl	8001e7c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000dae:	2029      	movs	r0, #41	; 0x29
 8000db0:	f7ff fdee 	bl	8000990 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fe97 	bl	8000ae8 <ILI9341_Set_Rotation>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	466b      	mov	r3, sp
 8000dce:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ddc:	d202      	bcs.n	8000de4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
 8000de2:	e002      	b.n	8000dea <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df0:	483e      	ldr	r0, [pc, #248]	; (8000eec <ILI9341_Draw_Colour_Burst+0x12c>)
 8000df2:	f001 feb3 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfc:	483b      	ldr	r0, [pc, #236]	; (8000eec <ILI9341_Draw_Colour_Burst+0x12c>)
 8000dfe:	f001 fead 	bl	8002b5c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e0e:	4603      	mov	r3, r0
 8000e10:	3b01      	subs	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	4601      	mov	r1, r0
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	f04f 0400 	mov.w	r4, #0
 8000e22:	00d4      	lsls	r4, r2, #3
 8000e24:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e28:	00cb      	lsls	r3, r1, #3
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	f04f 0400 	mov.w	r4, #0
 8000e38:	00d4      	lsls	r4, r2, #3
 8000e3a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e3e:	00cb      	lsls	r3, r1, #3
 8000e40:	1dc3      	adds	r3, r0, #7
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	ebad 0d03 	sub.w	sp, sp, r3
 8000e4a:	466b      	mov	r3, sp
 8000e4c:	3300      	adds	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e54:	e00e      	b.n	8000e74 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e60:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	3301      	adds	r3, #1
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	b2d1      	uxtb	r1, r2
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	3302      	adds	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3ec      	bcc.n	8000e56 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e90:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d010      	beq.n	8000ec6 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea8:	e009      	b.n	8000ebe <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <ILI9341_Draw_Colour_Burst+0x130>)
 8000eb4:	f003 f9d2 	bl	800425c <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	3301      	adds	r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3f1      	bcc.n	8000eaa <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	230a      	movs	r3, #10
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <ILI9341_Draw_Colour_Burst+0x130>)
 8000ed0:	f003 f9c4 	bl	800425c <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <ILI9341_Draw_Colour_Burst+0x12c>)
 8000edc:	f001 fe3e 	bl	8002b5c <HAL_GPIO_WritePin>
 8000ee0:	46ad      	mov	sp, r5
}
 8000ee2:	bf00      	nop
 8000ee4:	3730      	adds	r7, #48	; 0x30
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	20000160 	.word	0x20000160

08000ef4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <ILI9341_Fill_Screen+0x44>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <ILI9341_Fill_Screen+0x48>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fd83 	bl	8000a18 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <ILI9341_Fill_Screen+0x44>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <ILI9341_Fill_Screen+0x48>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	fb03 f302 	mul.w	r3, r3, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff48 	bl	8000dc0 <ILI9341_Draw_Colour_Burst>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000002 	.word	0x20000002
 8000f3c:	20000000 	.word	0x20000000

08000f40 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <ILI9341_Draw_Pixel+0x1a4>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	f080 80be 	bcs.w	80010dc <ILI9341_Draw_Pixel+0x19c>
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <ILI9341_Draw_Pixel+0x1a8>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f080 80b7 	bcs.w	80010dc <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f74:	485d      	ldr	r0, [pc, #372]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000f76:	f001 fdf1 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	485a      	ldr	r0, [pc, #360]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000f82:	f001 fdeb 	bl	8002b5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000f86:	202a      	movs	r0, #42	; 0x2a
 8000f88:	f7ff fcf0 	bl	800096c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	4856      	ldr	r0, [pc, #344]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000f94:	f001 fde2 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4853      	ldr	r0, [pc, #332]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000fa0:	f001 fddc 	bl	8002b5c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000faa:	4850      	ldr	r0, [pc, #320]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000fac:	f001 fdd6 	bl	8002b5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	753b      	strb	r3, [r7, #20]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	757b      	strb	r3, [r7, #21]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	121b      	asrs	r3, r3, #8
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	75bb      	strb	r3, [r7, #22]
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000fd4:	f107 0114 	add.w	r1, r7, #20
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4844      	ldr	r0, [pc, #272]	; (80010f0 <ILI9341_Draw_Pixel+0x1b0>)
 8000fde:	f003 f93d 	bl	800425c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4840      	ldr	r0, [pc, #256]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000fea:	f001 fdb7 	bl	8002b5c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff4:	483d      	ldr	r0, [pc, #244]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8000ff6:	f001 fdb1 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001000:	483a      	ldr	r0, [pc, #232]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001002:	f001 fdab 	bl	8002b5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001006:	202b      	movs	r0, #43	; 0x2b
 8001008:	f7ff fcb0 	bl	800096c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4836      	ldr	r0, [pc, #216]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001014:	f001 fda2 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001020:	f001 fd9c 	bl	8002b5c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4830      	ldr	r0, [pc, #192]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 800102c:	f001 fd96 	bl	8002b5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	743b      	strb	r3, [r7, #16]
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	747b      	strb	r3, [r7, #17]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	121b      	asrs	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	74bb      	strb	r3, [r7, #18]
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001054:	f107 0110 	add.w	r1, r7, #16
 8001058:	2301      	movs	r3, #1
 800105a:	2204      	movs	r2, #4
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <ILI9341_Draw_Pixel+0x1b0>)
 800105e:	f003 f8fd 	bl	800425c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 800106a:	f001 fd77 	bl	8002b5c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001074:	481d      	ldr	r0, [pc, #116]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001076:	f001 fd71 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001082:	f001 fd6b 	bl	8002b5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001086:	202c      	movs	r0, #44	; 0x2c
 8001088:	f7ff fc70 	bl	800096c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001092:	4816      	ldr	r0, [pc, #88]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 8001094:	f001 fd62 	bl	8002b5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109e:	4813      	ldr	r0, [pc, #76]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 80010a0:	f001 fd5c 	bl	8002b5c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 80010ac:	f001 fd56 	bl	8002b5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	733b      	strb	r3, [r7, #12]
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80010c0:	f107 010c 	add.w	r1, r7, #12
 80010c4:	2301      	movs	r3, #1
 80010c6:	2202      	movs	r2, #2
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <ILI9341_Draw_Pixel+0x1b0>)
 80010ca:	f003 f8c7 	bl	800425c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <ILI9341_Draw_Pixel+0x1ac>)
 80010d6:	f001 fd41 	bl	8002b5c <HAL_GPIO_WritePin>
 80010da:	e000      	b.n	80010de <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80010dc:	bf00      	nop
	
}
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000002 	.word	0x20000002
 80010e8:	20000000 	.word	0x20000000
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	20000160 	.word	0x20000160

080010f4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	4603      	mov	r3, r0
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <ILI9341_Draw_Rectangle+0xb4>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	429a      	cmp	r2, r3
 800111c:	d23f      	bcs.n	800119e <ILI9341_Draw_Rectangle+0xaa>
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <ILI9341_Draw_Rectangle+0xb8>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	88ba      	ldrh	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d239      	bcs.n	800119e <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 800112a:	88fa      	ldrh	r2, [r7, #6]
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	4413      	add	r3, r2
 8001130:	3b01      	subs	r3, #1
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <ILI9341_Draw_Rectangle+0xb4>)
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	b292      	uxth	r2, r2
 8001138:	4293      	cmp	r3, r2
 800113a:	db05      	blt.n	8001148 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <ILI9341_Draw_Rectangle+0xb4>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001148:	88ba      	ldrh	r2, [r7, #4]
 800114a:	883b      	ldrh	r3, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	3b01      	subs	r3, #1
 8001150:	4a16      	ldr	r2, [pc, #88]	; (80011ac <ILI9341_Draw_Rectangle+0xb8>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	b292      	uxth	r2, r2
 8001156:	4293      	cmp	r3, r2
 8001158:	db05      	blt.n	8001166 <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <ILI9341_Draw_Rectangle+0xb8>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29a      	uxth	r2, r3
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29c      	uxth	r4, r3
 8001172:	88ba      	ldrh	r2, [r7, #4]
 8001174:	883b      	ldrh	r3, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	88b9      	ldrh	r1, [r7, #4]
 8001180:	88f8      	ldrh	r0, [r7, #6]
 8001182:	4622      	mov	r2, r4
 8001184:	f7ff fc48 	bl	8000a18 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001188:	883b      	ldrh	r3, [r7, #0]
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	461a      	mov	r2, r3
 8001192:	8b3b      	ldrh	r3, [r7, #24]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fe12 	bl	8000dc0 <ILI9341_Draw_Colour_Burst>
 800119c:	e000      	b.n	80011a0 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800119e:	bf00      	nop
}
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000002 	.word	0x20000002
 80011ac:	20000000 	.word	0x20000000

080011b0 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4603      	mov	r3, r0
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d226      	bcs.n	8001228 <ILI9341_Draw_Horizontal_Line+0x78>
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <ILI9341_Draw_Horizontal_Line+0x84>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	88ba      	ldrh	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d220      	bcs.n	8001228 <ILI9341_Draw_Horizontal_Line+0x78>
if((X+Width-1)>=LCD_WIDTH)
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4413      	add	r3, r2
 80011ec:	3b01      	subs	r3, #1
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	b292      	uxth	r2, r2
 80011f4:	4293      	cmp	r3, r2
 80011f6:	db05      	blt.n	8001204 <ILI9341_Draw_Horizontal_Line+0x54>
	{
		Width=LCD_WIDTH-X;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	88b9      	ldrh	r1, [r7, #4]
 8001214:	88f8      	ldrh	r0, [r7, #6]
 8001216:	f7ff fbff 	bl	8000a18 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fdcd 	bl	8000dc0 <ILI9341_Draw_Colour_Burst>
 8001226:	e000      	b.n	800122a <ILI9341_Draw_Horizontal_Line+0x7a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001228:	bf00      	nop
}
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000002 	.word	0x20000002
 8001234:	20000000 	.word	0x20000000

08001238 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	4603      	mov	r3, r0
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <ILI9341_Draw_Vertical_Line+0x80>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	429a      	cmp	r2, r3
 8001260:	d226      	bcs.n	80012b0 <ILI9341_Draw_Vertical_Line+0x78>
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <ILI9341_Draw_Vertical_Line+0x84>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	d220      	bcs.n	80012b0 <ILI9341_Draw_Vertical_Line+0x78>
if((Y+Height-1)>=LCD_HEIGHT)
 800126e:	88ba      	ldrh	r2, [r7, #4]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4413      	add	r3, r2
 8001274:	3b01      	subs	r3, #1
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <ILI9341_Draw_Vertical_Line+0x84>)
 8001278:	8812      	ldrh	r2, [r2, #0]
 800127a:	b292      	uxth	r2, r2
 800127c:	4293      	cmp	r3, r2
 800127e:	db05      	blt.n	800128c <ILI9341_Draw_Vertical_Line+0x54>
	{
		Height=LCD_HEIGHT-Y;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <ILI9341_Draw_Vertical_Line+0x84>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29a      	uxth	r2, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800128c:	88ba      	ldrh	r2, [r7, #4]
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	88b9      	ldrh	r1, [r7, #4]
 800129c:	88f8      	ldrh	r0, [r7, #6]
 800129e:	f7ff fbbb 	bl	8000a18 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	883b      	ldrh	r3, [r7, #0]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd89 	bl	8000dc0 <ILI9341_Draw_Colour_Burst>
 80012ae:	e000      	b.n	80012b2 <ILI9341_Draw_Vertical_Line+0x7a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012b0:	bf00      	nop
}
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	20000002 	.word	0x20000002
 80012bc:	20000000 	.word	0x20000000

080012c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_ADC1_Init+0x74>)
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <MX_ADC1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_ADC1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_ADC1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_ADC1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_ADC1_Init+0x74>)
 80012ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_ADC1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_ADC1_Init+0x74>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_ADC1_Init+0x74>)
 80012fe:	f000 fddf 	bl	8001ec0 <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fb44 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001310:	2301      	movs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_ADC1_Init+0x74>)
 800131e:	f001 f85b 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001328:	f000 fb34 	bl	8001994 <Error_Handler>
  }

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000ec 	.word	0x200000ec
 8001338:	40012400 	.word	0x40012400

0800133c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_ADC_MspInit+0x6c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d121      	bne.n	80013a0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_ADC_MspInit+0x70>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_ADC_MspInit+0x70>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_ADC_MspInit+0x70>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_ADC_MspInit+0x70>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_ADC_MspInit+0x70>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_ADC_MspInit+0x70>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Pin;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001390:	2303      	movs	r3, #3
 8001392:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Voltage_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_ADC_MspInit+0x74>)
 800139c:	f001 fa84 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40012400 	.word	0x40012400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010800 	.word	0x40010800

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_GPIO_Init+0xa8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <MX_GPIO_Init+0xa8>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_GPIO_Init+0xa8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_GPIO_Init+0xa8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <MX_GPIO_Init+0xa8>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_GPIO_Init+0xa8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_GPIO_Init+0xa8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <MX_GPIO_Init+0xa8>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_GPIO_Init+0xa8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_GPIO_Init+0xa8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <MX_GPIO_Init+0xa8>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_GPIO_Init+0xa8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f245 0101 	movw	r1, #20481	; 0x5001
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_GPIO_Init+0xac>)
 8001430:	f001 fb94 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|CS_Pin|DC_Pin;
 8001434:	f245 0301 	movw	r3, #20481	; 0x5001
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2302      	movs	r3, #2
 8001444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_GPIO_Init+0xac>)
 800144e:	f001 fa2b 	bl	80028a8 <HAL_GPIO_Init>

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40010c00 	.word	0x40010c00

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f000 fca5 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f839 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f7ff ff9f 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001476:	f000 faff 	bl	8001a78 <MX_SPI2_Init>
  MX_ADC1_Init();
 800147a:	f7ff ff21 	bl	80012c0 <MX_ADC1_Init>
  MX_RTC_Init();
 800147e:	f000 fa8d 	bl	800199c <MX_RTC_Init>
  MX_TIM1_Init();
 8001482:	f000 fc05 	bl	8001c90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8001486:	f7ff fb8d 	bl	8000ba4 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fd32 	bl	8000ef4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fb29 	bl	8000ae8 <ILI9341_Set_Rotation>
  ILI9341_DrawText("EBiCS Display", FONT3, 10, 25, WHITE, BLACK); //DrawText uses Fonts from fonts.h / fonts.c
 8001496:	2300      	movs	r3, #0
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2319      	movs	r3, #25
 80014a2:	220a      	movs	r2, #10
 80014a4:	490b      	ldr	r1, [pc, #44]	; (80014d4 <main+0x70>)
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <main+0x74>)
 80014a8:	f7ff f8b3 	bl	8000612 <ILI9341_DrawText>
  ILI9341_DrawBigNumber("456", BIGFONT,10, 50, WHITE, BLACK);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2332      	movs	r3, #50	; 0x32
 80014b8:	220a      	movs	r2, #10
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <main+0x78>)
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <main+0x7c>)
 80014be:	f7ff f96e 	bl	800079e <ILI9341_DrawBigNumber>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_Delay(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c6:	f000 fcd9 	bl	8001e7c <HAL_Delay>
    /* USER CODE BEGIN 3 */
clock();
 80014ca:	f000 f9db 	bl	8001884 <clock>
checkBattery();
 80014ce:	f000 f8cf 	bl	8001670 <checkBattery>
HAL_Delay(500);
 80014d2:	e7f6      	b.n	80014c2 <main+0x5e>
 80014d4:	08005414 	.word	0x08005414
 80014d8:	080053a0 	.word	0x080053a0
 80014dc:	08006ebc 	.word	0x08006ebc
 80014e0:	080053b0 	.word	0x080053b0

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	2228      	movs	r2, #40	; 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fb1a 	bl	8004b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001514:	2305      	movs	r3, #5
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001534:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fb30 	bl	8002ba4 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800154a:	f000 fa23 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fd9a 	bl	80030a4 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001576:	f000 fa0d 	bl	8001994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001588:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4618      	mov	r0, r3
 800158e:	f001 ff11 	bl	80033b4 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001598:	f000 f9fc 	bl	8001994 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	; 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <map>:

/* USER CODE BEGIN 4 */
int16_t map (int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
 80015be:	4613      	mov	r3, r2
 80015c0:	803b      	strh	r3, [r7, #0]
  // if input is smaller/bigger than expected return the min/max out ranges value
  if (x < in_min)
 80015c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	da02      	bge.n	80015d4 <map+0x30>
    return out_min;
 80015ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015d2:	e047      	b.n	8001664 <map+0xc0>
  else if (x > in_max)
 80015d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dd02      	ble.n	80015e6 <map+0x42>
    return out_max;
 80015e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015e4:	e03e      	b.n	8001664 <map+0xc0>

  // map the input to the output range.
  // round up if mapping bigger ranges to smaller ranges
  else  if ((in_max - in_min) > (out_max - out_min))
 80015e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80015f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015f8:	1acb      	subs	r3, r1, r3
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dd1a      	ble.n	8001634 <map+0x90>
    return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80015fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800160c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001610:	1a8a      	subs	r2, r1, r2
 8001612:	3201      	adds	r2, #1
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800161c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001620:	1acb      	subs	r3, r1, r3
 8001622:	3301      	adds	r3, #1
 8001624:	fb92 f3f3 	sdiv	r3, r2, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	b21b      	sxth	r3, r3
 8001632:	e017      	b.n	8001664 <map+0xc0>
  // round down if mapping smaller ranges to bigger ranges
  else
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001634:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001642:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001646:	1a8a      	subs	r2, r1, r2
 8001648:	fb02 f203 	mul.w	r2, r2, r3
 800164c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001654:	1acb      	subs	r3, r1, r3
 8001656:	fb92 f3f3 	sdiv	r3, r2, r3
 800165a:	b29a      	uxth	r2, r3
 800165c:	883b      	ldrh	r3, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21b      	sxth	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bc90      	pop	{r4, r7}
 800166c:	4770      	bx	lr
	...

08001670 <checkBattery>:

void checkBattery()
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc1); // запу�?каем преобразование �?игнала �?ЦП
 8001676:	4878      	ldr	r0, [pc, #480]	; (8001858 <checkBattery+0x1e8>)
 8001678:	f000 fcfa 	bl	8002070 <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончани�? преобразовани�?
 800167c:	2164      	movs	r1, #100	; 0x64
 800167e:	4876      	ldr	r0, [pc, #472]	; (8001858 <checkBattery+0x1e8>)
 8001680:	f000 fda4 	bl	80021cc <HAL_ADC_PollForConversion>
	          adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001684:	4874      	ldr	r0, [pc, #464]	; (8001858 <checkBattery+0x1e8>)
 8001686:	f000 fe9b 	bl	80023c0 <HAL_ADC_GetValue>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b73      	ldr	r3, [pc, #460]	; (800185c <checkBattery+0x1ec>)
 8001690:	801a      	strh	r2, [r3, #0]
	          //HAL_ADC_Stop(&hadc1); // о�?танавливаем �?ЦП
	          j = map(adc, 0, 4096, batsympos[0]+4, batsympos[0]+38); //(adc, 0, 4096, 256, 290);
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <checkBattery+0x1ec>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b218      	sxth	r0, r3
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <checkBattery+0x1f0>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	3304      	adds	r3, #4
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <checkBattery+0x1f0>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3326      	adds	r3, #38	; 0x26
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4613      	mov	r3, r2
 80016b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b4:	2100      	movs	r1, #0
 80016b6:	f7ff ff75 	bl	80015a4 <map>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <checkBattery+0x1f4>)
 80016c0:	801a      	strh	r2, [r3, #0]
	          percent = map(adc, 0, 4096, 0, 100);
 80016c2:	4b66      	ldr	r3, [pc, #408]	; (800185c <checkBattery+0x1ec>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b218      	sxth	r0, r3
 80016c8:	2364      	movs	r3, #100	; 0x64
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d2:	2100      	movs	r1, #0
 80016d4:	f7ff ff66 	bl	80015a4 <map>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b62      	ldr	r3, [pc, #392]	; (8001868 <checkBattery+0x1f8>)
 80016de:	801a      	strh	r2, [r3, #0]
	         if(j<=273 && j>=260){i=ORANGE;};
 80016e0:	4b60      	ldr	r3, [pc, #384]	; (8001864 <checkBattery+0x1f4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80016e8:	d208      	bcs.n	80016fc <checkBattery+0x8c>
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <checkBattery+0x1f4>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016f2:	d303      	bcc.n	80016fc <checkBattery+0x8c>
 80016f4:	4b5d      	ldr	r3, [pc, #372]	; (800186c <checkBattery+0x1fc>)
 80016f6:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80016fa:	801a      	strh	r2, [r3, #0]
	         if(j>273){i= GREEN;}
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <checkBattery+0x1f4>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8001704:	d303      	bcc.n	800170e <checkBattery+0x9e>
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <checkBattery+0x1fc>)
 8001708:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800170c:	801a      	strh	r2, [r3, #0]
	         if(j<260){i= RED;}
 800170e:	4b55      	ldr	r3, [pc, #340]	; (8001864 <checkBattery+0x1f4>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001716:	d203      	bcs.n	8001720 <checkBattery+0xb0>
 8001718:	4b54      	ldr	r3, [pc, #336]	; (800186c <checkBattery+0x1fc>)
 800171a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800171e:	801a      	strh	r2, [r3, #0]
	snprintf(trans_str, 63, "%d\n", percent);
 8001720:	4b51      	ldr	r3, [pc, #324]	; (8001868 <checkBattery+0x1f8>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <checkBattery+0x200>)
 8001726:	213f      	movs	r1, #63	; 0x3f
 8001728:	4852      	ldr	r0, [pc, #328]	; (8001874 <checkBattery+0x204>)
 800172a:	f003 fa07 	bl	8004b3c <sniprintf>
	ILI9341_Draw_Hollow_Rectangle_Coord(batsympos[0], batsympos[1], batsympos[0]+39, batsympos[1]+14, WHITE);  //(252, 4, 291, 18, WHITE);
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <checkBattery+0x1f0>)
 8001730:	8818      	ldrh	r0, [r3, #0]
 8001732:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <checkBattery+0x1f0>)
 8001734:	8859      	ldrh	r1, [r3, #2]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <checkBattery+0x1f0>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3327      	adds	r3, #39	; 0x27
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <checkBattery+0x1f0>)
 8001740:	885b      	ldrh	r3, [r3, #2]
 8001742:	330e      	adds	r3, #14
 8001744:	b29c      	uxth	r4, r3
 8001746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4623      	mov	r3, r4
 800174e:	f7fe fe81 	bl	8000454 <ILI9341_Draw_Hollow_Rectangle_Coord>
			ILI9341_Draw_Hollow_Rectangle_Coord(batsympos[0]+1, batsympos[1]+1, batsympos[0]+38, batsympos[1]+13, WHITE); //(253, 5, 290, 17, WHITE);
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <checkBattery+0x1f0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b298      	uxth	r0, r3
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <checkBattery+0x1f0>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	3301      	adds	r3, #1
 8001760:	b299      	uxth	r1, r3
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <checkBattery+0x1f0>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	3326      	adds	r3, #38	; 0x26
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <checkBattery+0x1f0>)
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	330d      	adds	r3, #13
 8001770:	b29c      	uxth	r4, r3
 8001772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4623      	mov	r3, r4
 800177a:	f7fe fe6b 	bl	8000454 <ILI9341_Draw_Hollow_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(batsympos[0]+40, batsympos[1]+4, batsympos[0]+43, batsympos[1]+11, WHITE); //(292, 8, 295, 15, WHITE);
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <checkBattery+0x1f0>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	b298      	uxth	r0, r3
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <checkBattery+0x1f0>)
 8001788:	885b      	ldrh	r3, [r3, #2]
 800178a:	3304      	adds	r3, #4
 800178c:	b299      	uxth	r1, r3
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <checkBattery+0x1f0>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	332b      	adds	r3, #43	; 0x2b
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <checkBattery+0x1f0>)
 8001798:	885b      	ldrh	r3, [r3, #2]
 800179a:	330b      	adds	r3, #11
 800179c:	b29c      	uxth	r4, r3
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4623      	mov	r3, r4
 80017a6:	f7fe fed6 	bl	8000556 <ILI9341_Draw_Filled_Rectangle_Coord>
	if(tempPercent!=percent){
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <checkBattery+0x208>)
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <checkBattery+0x1f8>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d04c      	beq.n	8001850 <checkBattery+0x1e0>
		ILI9341_Draw_Filled_Rectangle_Coord(batsympos[0]+2, batsympos[1]+2, batsympos[0]+38, batsympos[1]+13, i);//(254, 6, 290, 17, i);
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <checkBattery+0x1f0>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3302      	adds	r3, #2
 80017bc:	b298      	uxth	r0, r3
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <checkBattery+0x1f0>)
 80017c0:	885b      	ldrh	r3, [r3, #2]
 80017c2:	3302      	adds	r3, #2
 80017c4:	b299      	uxth	r1, r3
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <checkBattery+0x1f0>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	3326      	adds	r3, #38	; 0x26
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <checkBattery+0x1f0>)
 80017d0:	885b      	ldrh	r3, [r3, #2]
 80017d2:	330d      	adds	r3, #13
 80017d4:	b29c      	uxth	r4, r3
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <checkBattery+0x1fc>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4623      	mov	r3, r4
 80017de:	f7fe feba 	bl	8000556 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(j, batsympos[1]+13, batsympos[0]+38, batsympos[1]+2, BLACK);//(j, 17, 290, 6, BLACK);
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <checkBattery+0x1f4>)
 80017e4:	8818      	ldrh	r0, [r3, #0]
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <checkBattery+0x1f0>)
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	330d      	adds	r3, #13
 80017ec:	b299      	uxth	r1, r3
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <checkBattery+0x1f0>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3326      	adds	r3, #38	; 0x26
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <checkBattery+0x1f0>)
 80017f8:	885b      	ldrh	r3, [r3, #2]
 80017fa:	3302      	adds	r3, #2
 80017fc:	b29c      	uxth	r4, r3
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4623      	mov	r3, r4
 8001804:	f7fe fea7 	bl	8000556 <ILI9341_Draw_Filled_Rectangle_Coord>
		tempPercent=percent;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <checkBattery+0x1f8>)
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <checkBattery+0x208>)
 800180e:	801a      	strh	r2, [r3, #0]
		ILI9341_DrawText(trans_str, FONT3, batsympos[0]-35, batsympos[1], WHITE, BLACK);
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <checkBattery+0x1f0>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	3b23      	subs	r3, #35	; 0x23
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <checkBattery+0x1f0>)
 800181a:	8859      	ldrh	r1, [r3, #2]
 800181c:	2300      	movs	r3, #0
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	4914      	ldr	r1, [pc, #80]	; (800187c <checkBattery+0x20c>)
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <checkBattery+0x204>)
 800182c:	f7fe fef1 	bl	8000612 <ILI9341_DrawText>
		ILI9341_DrawText("%", FONT3, batsympos[0]-20,  batsympos[1], WHITE, BLACK);
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <checkBattery+0x1f0>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	3b14      	subs	r3, #20
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <checkBattery+0x1f0>)
 800183a:	8859      	ldrh	r1, [r3, #2]
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <checkBattery+0x20c>)
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <checkBattery+0x210>)
 800184c:	f7fe fee1 	bl	8000612 <ILI9341_DrawText>
	}
}
 8001850:	bf00      	nop
 8001852:	3704      	adds	r7, #4
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	200000ec 	.word	0x200000ec
 800185c:	2000009c 	.word	0x2000009c
 8001860:	20000008 	.word	0x20000008
 8001864:	20000004 	.word	0x20000004
 8001868:	2000009e 	.word	0x2000009e
 800186c:	2000011c 	.word	0x2000011c
 8001870:	080053b4 	.word	0x080053b4
 8001874:	200000a0 	.word	0x200000a0
 8001878:	20000148 	.word	0x20000148
 800187c:	08005414 	.word	0x08005414
 8001880:	080053b8 	.word	0x080053b8

08001884 <clock>:
void clock()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af02      	add	r7, sp, #8
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800188a:	2200      	movs	r2, #0
 800188c:	4938      	ldr	r1, [pc, #224]	; (8001970 <clock+0xec>)
 800188e:	4839      	ldr	r0, [pc, #228]	; (8001974 <clock+0xf0>)
 8001890:	f002 f830 	bl	80038f4 <HAL_RTC_GetTime>
	 if(sTime.Minutes<10){
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <clock+0xec>)
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d80f      	bhi.n	80018bc <clock+0x38>
		 snprintf(trans_str, 62, "%d:0%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <clock+0xec>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <clock+0xec>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <clock+0xec>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	460b      	mov	r3, r1
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <clock+0xf4>)
 80018b4:	213e      	movs	r1, #62	; 0x3e
 80018b6:	4831      	ldr	r0, [pc, #196]	; (800197c <clock+0xf8>)
 80018b8:	f003 f940 	bl	8004b3c <sniprintf>
	 }
	 if(sTime.Seconds<10){
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <clock+0xec>)
 80018be:	789b      	ldrb	r3, [r3, #2]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d80f      	bhi.n	80018e4 <clock+0x60>
		 snprintf(trans_str, 62, "%d:%d:0%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <clock+0xec>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <clock+0xec>)
 80018cc:	785b      	ldrb	r3, [r3, #1]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <clock+0xec>)
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	460b      	mov	r3, r1
 80018da:	4a29      	ldr	r2, [pc, #164]	; (8001980 <clock+0xfc>)
 80018dc:	213e      	movs	r1, #62	; 0x3e
 80018de:	4827      	ldr	r0, [pc, #156]	; (800197c <clock+0xf8>)
 80018e0:	f003 f92c 	bl	8004b3c <sniprintf>
		 }

	 if(sTime.Hours<10){
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <clock+0xec>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d80f      	bhi.n	800190c <clock+0x88>
		 snprintf(trans_str, 62, "0%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <clock+0xec>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <clock+0xec>)
 80018f4:	785b      	ldrb	r3, [r3, #1]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <clock+0xec>)
 80018fa:	789b      	ldrb	r3, [r3, #2]
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9200      	str	r2, [sp, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <clock+0x100>)
 8001904:	213e      	movs	r1, #62	; 0x3e
 8001906:	481d      	ldr	r0, [pc, #116]	; (800197c <clock+0xf8>)
 8001908:	f003 f918 	bl	8004b3c <sniprintf>
			 }

	 if((sTime.Hours<10)&&(sTime.Minutes<10)){
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <clock+0xec>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d813      	bhi.n	800193c <clock+0xb8>
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <clock+0xec>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d80f      	bhi.n	800193c <clock+0xb8>
	 		 snprintf(trans_str, 62, "0%d:0%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <clock+0xec>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <clock+0xec>)
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	461a      	mov	r2, r3
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <clock+0xec>)
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9200      	str	r2, [sp, #0]
 8001930:	460b      	mov	r3, r1
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <clock+0x104>)
 8001934:	213e      	movs	r1, #62	; 0x3e
 8001936:	4811      	ldr	r0, [pc, #68]	; (800197c <clock+0xf8>)
 8001938:	f003 f900 	bl	8004b3c <sniprintf>
	 			 }
		         //snprintf(trans_str, 62, "%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
		         //ILI9341_DrawText(trans_str, 10, 10, WHITE, 2, BLACK);
		         if(tempClock!=sTime.Seconds){
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <clock+0xec>)
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <clock+0x108>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d00f      	beq.n	800196a <clock+0xe6>
		        	 tempClock=sTime.Seconds;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <clock+0xec>)
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <clock+0x108>)
 8001952:	801a      	strh	r2, [r3, #0]
		        	 ILI9341_DrawText(trans_str, FONT4, 0, 0, WHITE, BLACK);}
 8001954:	2300      	movs	r3, #0
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	2200      	movs	r2, #0
 8001962:	490b      	ldr	r1, [pc, #44]	; (8001990 <clock+0x10c>)
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <clock+0xf8>)
 8001966:	f7fe fe54 	bl	8000612 <ILI9341_DrawText>
		         }
		        //  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
		       //  snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
		       //  ILI9341_Draw_Text(trans_str, 10, 30, WHITE, 2, BLACK);
		         //HAL_Delay(1000);
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000098 	.word	0x20000098
 8001974:	2000014c 	.word	0x2000014c
 8001978:	080053bc 	.word	0x080053bc
 800197c:	200000a0 	.word	0x200000a0
 8001980:	080053c8 	.word	0x080053c8
 8001984:	080053d4 	.word	0x080053d4
 8001988:	080053e0 	.word	0x080053e0
 800198c:	2000014a 	.word	0x2000014a
 8001990:	08005d78 	.word	0x08005d78

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199a:	e7fe      	b.n	800199a <Error_Handler+0x6>

0800199c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2100      	movs	r1, #0
 80019a6:	460a      	mov	r2, r1
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	460a      	mov	r2, r1
 80019ac:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_RTC_Init+0x8c>)
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <MX_RTC_Init+0x90>)
 80019b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_RTC_Init+0x8c>)
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295
 80019be:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_RTC_Init+0x8c>)
 80019c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019c8:	4817      	ldr	r0, [pc, #92]	; (8001a28 <MX_RTC_Init+0x8c>)
 80019ca:	f001 fe65 	bl	8003698 <HAL_RTC_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80019d4:	f7ff ffde 	bl	8001994 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80019d8:	2300      	movs	r3, #0
 80019da:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80019dc:	2300      	movs	r3, #0
 80019de:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2201      	movs	r2, #1
 80019e8:	4619      	mov	r1, r3
 80019ea:	480f      	ldr	r0, [pc, #60]	; (8001a28 <MX_RTC_Init+0x8c>)
 80019ec:	f001 feea 	bl	80037c4 <HAL_RTC_SetTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80019f6:	f7ff ffcd 	bl	8001994 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019fa:	2301      	movs	r3, #1
 80019fc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_RTC_Init+0x8c>)
 8001a12:	f002 f847 	bl	8003aa4 <HAL_RTC_SetDate>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001a1c:	f7ff ffba 	bl	8001994 <Error_Handler>
  }

}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000014c 	.word	0x2000014c
 8001a2c:	40002800 	.word	0x40002800

08001a30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_RTC_MspInit+0x3c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d110      	bne.n	8001a64 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a42:	f001 f8a3 	bl	8002b8c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RTC_MspInit+0x40>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RTC_MspInit+0x40>)
 8001a4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RTC_MspInit+0x40>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RTC_MspInit+0x44>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40002800 	.word	0x40002800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	4242043c 	.word	0x4242043c

08001a78 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <MX_SPI2_Init+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_SPI2_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_SPI2_Init+0x64>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_SPI2_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_SPI2_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_SPI2_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_SPI2_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI2_Init+0x64>)
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_SPI2_Init+0x64>)
 8001aca:	f002 fb43 	bl	8004154 <HAL_SPI_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ad4:	f7ff ff5e 	bl	8001994 <Error_Handler>
  }

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000160 	.word	0x20000160
 8001ae0:	40003800 	.word	0x40003800

08001ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_SPI_MspInit+0x74>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d124      	bne.n	8001b4e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	61d3      	str	r3, [r2, #28]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_SPI_MspInit+0x78>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_SPI_MspInit+0x7c>)
 8001b4a:	f000 fead 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010c00 	.word	0x40010c00

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0e:	f000 f919 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f002 ff46 	bl	8004ad8 <__errno>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	230c      	movs	r3, #12
 8001c50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20005000 	.word	0x20005000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	200000e0 	.word	0x200000e0
 8001c80:	20000208 	.word	0x20000208

08001c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <MX_TIM1_Init+0x9c>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd8:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cda:	f002 fca1 	bl	8004620 <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ce4:	f7ff fe56 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001cf6:	f002 fce2 	bl	80046be <HAL_TIM_ConfigClockSource>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d00:	f7ff fe48 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_TIM1_Init+0x98>)
 8001d12:	f002 fe83 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d1c:	f7ff fe3a 	bl	8001994 <Error_Handler>
  }

}
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200001b8 	.word	0x200001b8
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_TIM_Base_MspInit+0x34>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10b      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_TIM_Base_MspInit+0x38>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_TIM_Base_MspInit+0x38>)
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_TIM_Base_MspInit+0x38>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40021000 	.word	0x40021000

08001d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d6e:	e003      	b.n	8001d78 <LoopCopyDataInit>

08001d70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d76:	3104      	adds	r1, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d80:	d3f6      	bcc.n	8001d70 <CopyDataInit>
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d84:	e002      	b.n	8001d8c <LoopFillZerobss>

08001d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d88:	f842 3b04 	str.w	r3, [r2], #4

08001d8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d90:	d3f9      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d92:	f7ff ff77 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f002 fea5 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9a:	f7ff fb63 	bl	8001464 <main>
  bx lr
 8001d9e:	4770      	bx	lr
  ldr r3, =_sidata
 8001da0:	080081b0 	.word	0x080081b0
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001da8:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001dac:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001db0:	20000208 	.word	0x20000208

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_Init+0x28>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_Init+0x28>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 fd39 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fec6 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fd43 	bl	800288e <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 fd19 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	20000010 	.word	0x20000010

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000014 	.word	0x20000014
 8001e64:	20000200 	.word	0x20000200

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000200 	.word	0x20000200

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_Delay+0x40>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffe0 	bl	8001e68 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000014 	.word	0x20000014

08001ec0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0be      	b.n	8002060 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fa1c 	bl	800133c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fbb1 	bl	800266c <ADC_ConversionStop_Disable>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8099 	bne.w	800204e <HAL_ADC_Init+0x18e>
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 8095 	bne.w	800204e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f2c:	f023 0302 	bic.w	r3, r3, #2
 8001f30:	f043 0202 	orr.w	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
 8001f46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f58:	d003      	beq.n	8001f62 <HAL_ADC_Init+0xa2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_ADC_Init+0xa8>
 8001f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f66:	e000      	b.n	8001f6a <HAL_ADC_Init+0xaa>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7d1b      	ldrb	r3, [r3, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d119      	bne.n	8001fac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7b1b      	ldrb	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	035a      	lsls	r2, r3, #13
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e00b      	b.n	8001fac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_ADC_Init+0x1a8>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_Init+0x126>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d104      	bne.n	8001ff0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	430a      	orrs	r2, r1
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_ADC_Init+0x1ac>)
 800200c:	4013      	ands	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	d10b      	bne.n	800202c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800202a:	e018      	b.n	800205e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f023 0312 	bic.w	r3, r3, #18
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800204c:	e007      	b.n	800205e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	ffe1f7fd 	.word	0xffe1f7fd
 800206c:	ff1f0efe 	.word	0xff1f0efe

08002070 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_Start+0x1a>
 8002086:	2302      	movs	r3, #2
 8002088:	e098      	b.n	80021bc <HAL_ADC_Start+0x14c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fa98 	bl	80025c8 <ADC_Enable>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8087 	bne.w	80021b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <HAL_ADC_Start+0x154>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_Start+0x5e>
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_ADC_Start+0x158>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d115      	bne.n	80020fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d026      	beq.n	8002136 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f8:	e01d      	b.n	8002136 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2f      	ldr	r2, [pc, #188]	; (80021c8 <HAL_ADC_Start+0x158>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_ADC_Start+0xaa>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <HAL_ADC_Start+0x154>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10d      	bne.n	8002136 <HAL_ADC_Start+0xc6>
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_ADC_Start+0x158>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800212e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f023 0206 	bic.w	r2, r3, #6
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
 800214e:	e002      	b.n	8002156 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0202 	mvn.w	r2, #2
 8002166:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002172:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002176:	d113      	bne.n	80021a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_ADC_Start+0x154>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d105      	bne.n	800218e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_ADC_Start+0x158>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	e00c      	b.n	80021ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e003      	b.n	80021ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40012800 	.word	0x40012800
 80021c8:	40012400 	.word	0x40012400

080021cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021e2:	f7ff fe41 	bl	8001e68 <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0c8      	b.n	80023a0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12a      	bne.n	8002272 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d123      	bne.n	8002272 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800222a:	e01a      	b.n	8002262 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d016      	beq.n	8002262 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_ADC_PollForConversion+0x7e>
 800223a:	f7ff fe15 	bl	8001e68 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d20b      	bcs.n	8002262 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f043 0204 	orr.w	r2, r3, #4
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e09e      	b.n	80023a0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0dd      	beq.n	800222c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002270:	e06c      	b.n	800234c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_ADC_PollForConversion+0x1dc>)
 8002274:	681c      	ldr	r4, [r3, #0]
 8002276:	2002      	movs	r0, #2
 8002278:	f001 f952 	bl	8003520 <HAL_RCCEx_GetPeriphCLKFreq>
 800227c:	4603      	mov	r3, r0
 800227e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6919      	ldr	r1, [r3, #16]
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_ADC_PollForConversion+0x1e0>)
 800228a:	400b      	ands	r3, r1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d118      	bne.n	80022c2 <HAL_ADC_PollForConversion+0xf6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_ADC_PollForConversion+0x1e4>)
 8002298:	400b      	ands	r3, r1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d111      	bne.n	80022c2 <HAL_ADC_PollForConversion+0xf6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6919      	ldr	r1, [r3, #16]
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_ADC_PollForConversion+0x1e8>)
 80022a6:	400b      	ands	r3, r1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <HAL_ADC_PollForConversion+0xf2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_ADC_PollForConversion+0x1ec>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_PollForConversion+0xf2>
 80022ba:	2314      	movs	r3, #20
 80022bc:	e020      	b.n	8002300 <HAL_ADC_PollForConversion+0x134>
 80022be:	2329      	movs	r3, #41	; 0x29
 80022c0:	e01e      	b.n	8002300 <HAL_ADC_PollForConversion+0x134>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_ADC_PollForConversion+0x1e8>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_ADC_PollForConversion+0x112>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_ADC_PollForConversion+0x1ec>)
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_ADC_PollForConversion+0x12e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6919      	ldr	r1, [r3, #16]
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_ADC_PollForConversion+0x1f0>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d108      	bne.n	80022fe <HAL_ADC_PollForConversion+0x132>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_ADC_PollForConversion+0x1f0>)
 80022f4:	400b      	ands	r3, r1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_PollForConversion+0x132>
 80022fa:	2354      	movs	r3, #84	; 0x54
 80022fc:	e000      	b.n	8002300 <HAL_ADC_PollForConversion+0x134>
 80022fe:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002306:	e01d      	b.n	8002344 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d016      	beq.n	800233e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_ADC_PollForConversion+0x15a>
 8002316:	f7ff fda7 	bl	8001e68 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20b      	bcs.n	800233e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f043 0204 	orr.w	r2, r3, #4
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e030      	b.n	80023a0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8dd      	bhi.n	8002308 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0212 	mvn.w	r2, #18
 8002354:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800236c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002370:	d115      	bne.n	800239e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	24924924 	.word	0x24924924
 80023b0:	00924924 	.word	0x00924924
 80023b4:	12492492 	.word	0x12492492
 80023b8:	00492492 	.word	0x00492492
 80023bc:	00249249 	.word	0x00249249

080023c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x20>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0dc      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1da>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d81c      	bhi.n	8002442 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b05      	subs	r3, #5
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	4019      	ands	r1, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b05      	subs	r3, #5
 8002434:	fa00 f203 	lsl.w	r2, r0, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
 8002440:	e03c      	b.n	80024bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d81c      	bhi.n	8002484 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b23      	subs	r3, #35	; 0x23
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	4019      	ands	r1, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b23      	subs	r3, #35	; 0x23
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
 8002482:	e01b      	b.n	80024bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	; 0x41
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4019      	ands	r1, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b41      	subs	r3, #65	; 0x41
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d91c      	bls.n	80024fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	4019      	ands	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6898      	ldr	r0, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	3b1e      	subs	r3, #30
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	e019      	b.n	8002532 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6919      	ldr	r1, [r3, #16]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	4019      	ands	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d003      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800253e:	2b11      	cmp	r3, #17
 8002540:	d132      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d125      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d126      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002568:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d11a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	0c9a      	lsrs	r2, r3, #18
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002588:	e002      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3b01      	subs	r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_ConfigChannel+0x1b2>
 8002596:	e007      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012400 	.word	0x40012400
 80025c0:	2000000c 	.word	0x2000000c
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d039      	beq.n	800265a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <ADC_Enable+0x9c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <ADC_Enable+0xa0>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002604:	e002      	b.n	800260c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002612:	f7ff fc29 	bl	8001e68 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002618:	e018      	b.n	800264c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261a:	f7ff fc25 	bl	8001e68 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d911      	bls.n	800264c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e007      	b.n	800265c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d1df      	bne.n	800261a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000000c 	.word	0x2000000c
 8002668:	431bde83 	.word	0x431bde83

0800266c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d127      	bne.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002696:	f7ff fbe7 	bl	8001e68 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800269c:	e014      	b.n	80026c8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269e:	f7ff fbe3 	bl	8001e68 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d90d      	bls.n	80026c8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d0e3      	beq.n	800269e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff90 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff49 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff5e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffb0 	bl	80027fc <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e127      	b.n	8002b0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028bc:	2201      	movs	r2, #1
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8116 	bne.w	8002b06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d034      	beq.n	800294c <HAL_GPIO_Init+0xa4>
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d80d      	bhi.n	8002902 <HAL_GPIO_Init+0x5a>
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d02b      	beq.n	8002942 <HAL_GPIO_Init+0x9a>
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d804      	bhi.n	80028f8 <HAL_GPIO_Init+0x50>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d031      	beq.n	8002956 <HAL_GPIO_Init+0xae>
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d01c      	beq.n	8002930 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028f6:	e048      	b.n	800298a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d043      	beq.n	8002984 <HAL_GPIO_Init+0xdc>
 80028fc:	2b11      	cmp	r3, #17
 80028fe:	d01b      	beq.n	8002938 <HAL_GPIO_Init+0x90>
          break;
 8002900:	e043      	b.n	800298a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002902:	4a89      	ldr	r2, [pc, #548]	; (8002b28 <HAL_GPIO_Init+0x280>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d026      	beq.n	8002956 <HAL_GPIO_Init+0xae>
 8002908:	4a87      	ldr	r2, [pc, #540]	; (8002b28 <HAL_GPIO_Init+0x280>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d806      	bhi.n	800291c <HAL_GPIO_Init+0x74>
 800290e:	4a87      	ldr	r2, [pc, #540]	; (8002b2c <HAL_GPIO_Init+0x284>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d020      	beq.n	8002956 <HAL_GPIO_Init+0xae>
 8002914:	4a86      	ldr	r2, [pc, #536]	; (8002b30 <HAL_GPIO_Init+0x288>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_GPIO_Init+0xae>
          break;
 800291a:	e036      	b.n	800298a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800291c:	4a85      	ldr	r2, [pc, #532]	; (8002b34 <HAL_GPIO_Init+0x28c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0xae>
 8002922:	4a85      	ldr	r2, [pc, #532]	; (8002b38 <HAL_GPIO_Init+0x290>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d016      	beq.n	8002956 <HAL_GPIO_Init+0xae>
 8002928:	4a84      	ldr	r2, [pc, #528]	; (8002b3c <HAL_GPIO_Init+0x294>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0xae>
          break;
 800292e:	e02c      	b.n	800298a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	623b      	str	r3, [r7, #32]
          break;
 8002936:	e028      	b.n	800298a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	623b      	str	r3, [r7, #32]
          break;
 8002940:	e023      	b.n	800298a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	3308      	adds	r3, #8
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e01e      	b.n	800298a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	330c      	adds	r3, #12
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e019      	b.n	800298a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800295e:	2304      	movs	r3, #4
 8002960:	623b      	str	r3, [r7, #32]
          break;
 8002962:	e012      	b.n	800298a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800296c:	2308      	movs	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	611a      	str	r2, [r3, #16]
          break;
 8002976:	e008      	b.n	800298a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	615a      	str	r2, [r3, #20]
          break;
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
          break;
 8002988:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2bff      	cmp	r3, #255	; 0xff
 800298e:	d801      	bhi.n	8002994 <HAL_GPIO_Init+0xec>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	e001      	b.n	8002998 <HAL_GPIO_Init+0xf0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	d802      	bhi.n	80029a6 <HAL_GPIO_Init+0xfe>
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x104>
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	3b08      	subs	r3, #8
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	210f      	movs	r1, #15
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	401a      	ands	r2, r3
 80029be:	6a39      	ldr	r1, [r7, #32]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8096 	beq.w	8002b06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029da:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_GPIO_Init+0x298>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_GPIO_Init+0x298>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6193      	str	r3, [r2, #24]
 80029e6:	4b56      	ldr	r3, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x298>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029f2:	4a54      	ldr	r2, [pc, #336]	; (8002b44 <HAL_GPIO_Init+0x29c>)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x19e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x19a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x196>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x192>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x1a0>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x1a0>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x1a0>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x1a0>
 8002a46:	2300      	movs	r3, #0
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a58:	493a      	ldr	r1, [pc, #232]	; (8002b44 <HAL_GPIO_Init+0x29c>)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4938      	ldr	r1, [pc, #224]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
 8002a7e:	e006      	b.n	8002a8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	4933      	ldr	r1, [pc, #204]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e006      	b.n	8002ab6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	4929      	ldr	r1, [pc, #164]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4924      	ldr	r1, [pc, #144]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	491f      	ldr	r1, [pc, #124]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60cb      	str	r3, [r1, #12]
 8002af6:	e006      	b.n	8002b06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4915      	ldr	r1, [pc, #84]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f47f aed0 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	372c      	adds	r7, #44	; 0x2c
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	10210000 	.word	0x10210000
 8002b2c:	10110000 	.word	0x10110000
 8002b30:	10120000 	.word	0x10120000
 8002b34:	10310000 	.word	0x10310000
 8002b38:	10320000 	.word	0x10320000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40010800 	.word	0x40010800
 8002b4c:	40010c00 	.word	0x40010c00
 8002b50:	40011000 	.word	0x40011000
 8002b54:	40011400 	.word	0x40011400
 8002b58:	40010400 	.word	0x40010400

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b78:	e003      	b.n	8002b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	041a      	lsls	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	611a      	str	r2, [r3, #16]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	420e0020 	.word	0x420e0020

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e26c      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8087 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d00c      	beq.n	8002bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d112      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d06c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d168      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e246      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x76>
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7f      	ldr	r2, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e02e      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b78      	ldr	r3, [pc, #480]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xbc>
 8002c46:	4b72      	ldr	r3, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a71      	ldr	r2, [pc, #452]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c60:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff f8f2 	bl	8001e68 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff f8ee 	bl	8001e68 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1fa      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe4>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f8de 	bl	8001e68 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff f8da 	bl	8001e68 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1e6      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x10c>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1ba      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4939      	ldr	r1, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff f893 	bl	8001e68 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7ff f88f 	bl	8001e68 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e19b      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4927      	ldr	r1, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff f872 	bl	8001e68 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7ff f86e 	bl	8001e68 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e17a      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03a      	beq.n	8002e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc0:	f7ff f852 	bl	8001e68 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7ff f84e 	bl	8001e68 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e15a      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f000 fac6 	bl	8003378 <RCC_Delay>
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7ff f838 	bl	8001e68 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff f834 	bl	8001e68 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d908      	bls.n	8002e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e140      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	42420000 	.word	0x42420000
 8002e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e9      	bne.n	8002dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a6 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b97      	ldr	r3, [pc, #604]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b94      	ldr	r3, [pc, #592]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a93      	ldr	r2, [pc, #588]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a8a      	ldr	r2, [pc, #552]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fff5 	bl	8001e68 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe fff1 	bl	8001e68 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0fd      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x312>
 8002ea8:	4b7b      	ldr	r3, [pc, #492]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a7a      	ldr	r2, [pc, #488]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x356>
 8002ee0:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a69      	ldr	r2, [pc, #420]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a66      	ldr	r2, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe ffa5 	bl	8001e68 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe ffa1 	bl	8001e68 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0ab      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b57      	ldr	r3, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x37e>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fe ff8f 	bl	8001e68 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe ff8b 	bl	8001e68 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e095      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b48      	ldr	r3, [pc, #288]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a47      	ldr	r2, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8081 	beq.w	800308e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d061      	beq.n	800305c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d146      	bne.n	800302e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fe ff5f 	bl	8001e68 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe ff5b 	bl	8001e68 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e067      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	492d      	ldr	r1, [pc, #180]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a19      	ldr	r1, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	4927      	ldr	r1, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe ff2f 	bl	8001e68 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fe ff2b 	bl	8001e68 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e037      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x46a>
 800302c:	e02f      	b.n	800308e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe ff18 	bl	8001e68 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fe ff14 	bl	8001e68 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e020      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x498>
 800305a:	e018      	b.n	800308e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	42420060 	.word	0x42420060

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d0      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4965      	ldr	r1, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d040      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e073      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4936      	ldr	r1, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fe fe68 	bl	8001e68 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fe fe64 	bl	8001e68 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e053      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d210      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4922      	ldr	r1, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4601      	mov	r1, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	fa21 f303 	lsr.w	r3, r1, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1cc>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fdc6 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000
 8003268:	40021000 	.word	0x40021000
 800326c:	0800815c 	.word	0x0800815c
 8003270:	2000000c 	.word	0x2000000c
 8003274:	20000010 	.word	0x20000010

08003278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b490      	push	{r4, r7}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003280:	1d3c      	adds	r4, r7, #4
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_GetSysClockFreq+0xb4>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x46>
 80032b6:	e02d      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ba:	623b      	str	r3, [r7, #32]
      break;
 80032bc:	e02d      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c5b      	lsrs	r3, r3, #17
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ea:	4413      	add	r3, r2
 80032ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f6:	fb02 f203 	mul.w	r2, r2, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	623b      	str	r3, [r7, #32]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003316:	623b      	str	r3, [r7, #32]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6a3b      	ldr	r3, [r7, #32]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc90      	pop	{r4, r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	080053ec 	.word	0x080053ec
 800332c:	080053fc 	.word	0x080053fc
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	2000000c 	.word	0x2000000c

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4601      	mov	r1, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0adb      	lsrs	r3, r3, #11
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	0800816c 	.word	0x0800816c

08003378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <RCC_Delay+0x34>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <RCC_Delay+0x38>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a5b      	lsrs	r3, r3, #9
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003394:	bf00      	nop
  }
  while (Delay --);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f9      	bne.n	8003394 <RCC_Delay+0x1c>
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d07d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	61d3      	str	r3, [r2, #28]
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d118      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003414:	f7fe fd28 	bl	8001e68 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	e008      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fd24 	bl	8001e68 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e06d      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02e      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d027      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003458:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d014      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fcf3 	bl	8001e68 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fcef 	bl	8001e68 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e036      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4917      	ldr	r1, [pc, #92]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	490b      	ldr	r1, [pc, #44]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40007000 	.word	0x40007000
 800351c:	42420440 	.word	0x42420440

08003520 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b08d      	sub	sp, #52	; 0x34
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003528:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800352a:	f107 040c 	add.w	r4, r7, #12
 800352e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	2300      	movs	r3, #0
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d07f      	beq.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d002      	beq.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d048      	beq.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800355c:	e08b      	b.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d07f      	beq.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800357c:	4413      	add	r3, r2
 800357e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003582:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0c5b      	lsrs	r3, r3, #17
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800359c:	4413      	add	r3, r2
 800359e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035ae:	4a37      	ldr	r2, [pc, #220]	; (800368c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035be:	e004      	b.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	4a33      	ldr	r2, [pc, #204]	; (8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d6:	d102      	bne.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035dc:	e048      	b.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035ec:	e040      	b.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d108      	bne.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003610:	e01f      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361c:	d109      	bne.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800362a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363c:	d11a      	bne.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800364a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003650:	e010      	b.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003652:	e00f      	b.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003654:	f7ff fe7c 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0b9b      	lsrs	r3, r3, #14
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	3301      	adds	r3, #1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003674:	bf00      	nop
    }
  }
  return (frequency);
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003678:	4618      	mov	r0, r3
 800367a:	3734      	adds	r7, #52	; 0x34
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	08005400 	.word	0x08005400
 8003684:	08005410 	.word	0x08005410
 8003688:	40021000 	.word	0x40021000
 800368c:	007a1200 	.word	0x007a1200
 8003690:	003d0900 	.word	0x003d0900
 8003694:	aaaaaaab 	.word	0xaaaaaaab

08003698 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e084      	b.n	80037b8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7c5b      	ldrb	r3, [r3, #17]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe f9b6 	bl	8001a30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 faa0 	bl	8003c10 <HAL_RTC_WaitForSynchro>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2204      	movs	r2, #4
 80036da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e06b      	b.n	80037b8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb59 	bl	8003d98 <RTC_EnterInitMode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e060      	b.n	80037b8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0207 	bic.w	r2, r2, #7
 8003704:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_RTC_Init+0x128>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_RTC_Init+0x128>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RTC_Init+0x128>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4926      	ldr	r1, [pc, #152]	; (80037c0 <HAL_RTC_Init+0x128>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d003      	beq.n	800373e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e00e      	b.n	800375c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff feee 	bl	8003520 <HAL_RCCEx_GetPeriphCLKFreq>
 8003744:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2204      	movs	r2, #4
 8003750:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e030      	b.n	80037b8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 010f 	bic.w	r1, r3, #15
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	0c1a      	lsrs	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	b291      	uxth	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fb2d 	bl	8003de8 <RTC_ExitInitMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00c      	b.n	80037b8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40006c00 	.word	0x40006c00

080037c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_RTC_SetTime+0x20>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e080      	b.n	80038ea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	7c1b      	ldrb	r3, [r3, #16]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_RTC_SetTime+0x30>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e07a      	b.n	80038ea <HAL_RTC_SetTime+0x126>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2202      	movs	r2, #2
 80037fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003810:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	4619      	mov	r1, r3
 800381a:	460b      	mov	r3, r1
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003822:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e01e      	b.n	800386c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb1d 	bl	8003e72 <RTC_Bcd2ToByte>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003840:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fb12 	bl	8003e72 <RTC_Bcd2ToByte>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800385a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	789b      	ldrb	r3, [r3, #2]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb06 	bl	8003e72 <RTC_Bcd2ToByte>
 8003866:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003868:	4423      	add	r3, r4
 800386a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa2b 	bl	8003cca <RTC_WriteTimeCounter>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2204      	movs	r2, #4
 800387e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02f      	b.n	80038ea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0205 	bic.w	r2, r2, #5
 8003898:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa3c 	bl	8003d18 <RTC_ReadAlarmCounter>
 80038a0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d018      	beq.n	80038dc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d214      	bcs.n	80038dc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038bc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fa42 	bl	8003d4a <RTC_WriteAlarmCounter>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2204      	movs	r2, #4
 80038d0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e006      	b.n	80038ea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}
	...

080038f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RTC_GetTime+0x28>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b5      	b.n	8003a8c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0ac      	b.n	8003a8c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f999 	bl	8003c6a <RTC_ReadTimeCounter>
 8003938:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4a55      	ldr	r2, [pc, #340]	; (8003a94 <HAL_RTC_GetTime+0x1a0>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0adb      	lsrs	r3, r3, #11
 8003944:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4b52      	ldr	r3, [pc, #328]	; (8003a94 <HAL_RTC_GetTime+0x1a0>)
 800394a:	fba3 1302 	umull	r1, r3, r3, r2
 800394e:	0adb      	lsrs	r3, r3, #11
 8003950:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	4a4f      	ldr	r2, [pc, #316]	; (8003a98 <HAL_RTC_GetTime+0x1a4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_RTC_GetTime+0x1a0>)
 800396c:	fba2 1203 	umull	r1, r2, r2, r3
 8003970:	0ad2      	lsrs	r2, r2, #11
 8003972:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003976:	fb01 f202 	mul.w	r2, r1, r2
 800397a:	1a9a      	subs	r2, r3, r2
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RTC_GetTime+0x1a4>)
 800397e:	fba3 1302 	umull	r1, r3, r3, r2
 8003982:	0959      	lsrs	r1, r3, #5
 8003984:	460b      	mov	r3, r1
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a5b      	subs	r3, r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	1ad1      	subs	r1, r2, r3
 800398e:	b2ca      	uxtb	r2, r1
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b17      	cmp	r3, #23
 8003998:	d955      	bls.n	8003a46 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <HAL_RTC_GetTime+0x1a8>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <HAL_RTC_GetTime+0x1a8>)
 80039aa:	fba3 2301 	umull	r2, r3, r3, r1
 80039ae:	091a      	lsrs	r2, r3, #4
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1aca      	subs	r2, r1, r3
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f9a9 	bl	8003d18 <RTC_ReadAlarmCounter>
 80039c6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d008      	beq.n	80039e2 <HAL_RTC_GetTime+0xee>
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d904      	bls.n	80039e2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e002      	b.n	80039e8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4a2d      	ldr	r2, [pc, #180]	; (8003aa0 <HAL_RTC_GetTime+0x1ac>)
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f966 	bl	8003cca <RTC_WriteTimeCounter>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e041      	b.n	8003a8c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d00c      	beq.n	8003a2a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a18:	69f9      	ldr	r1, [r7, #28]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f995 	bl	8003d4a <RTC_WriteAlarmCounter>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e030      	b.n	8003a8c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f98c 	bl	8003d4a <RTC_WriteAlarmCounter>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e027      	b.n	8003a8c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa34 	bl	8003eac <RTC_DateUpdate>
 8003a44:	e003      	b.n	8003a4e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01a      	beq.n	8003a8a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f9ed 	bl	8003e38 <RTC_ByteToBcd2>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f9e4 	bl	8003e38 <RTC_ByteToBcd2>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9db 	bl	8003e38 <RTC_ByteToBcd2>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	91a2b3c5 	.word	0x91a2b3c5
 8003a98:	88888889 	.word	0x88888889
 8003a9c:	aaaaaaab 	.word	0xaaaaaaab
 8003aa0:	00015180 	.word	0x00015180

08003aa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RTC_SetDate+0x24>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e097      	b.n	8003bfc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	7c1b      	ldrb	r3, [r3, #16]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RTC_SetDate+0x34>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e091      	b.n	8003bfc <HAL_RTC_SetDate+0x158>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	78da      	ldrb	r2, [r3, #3]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785a      	ldrb	r2, [r3, #1]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	789a      	ldrb	r2, [r3, #2]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	739a      	strb	r2, [r3, #14]
 8003b02:	e01a      	b.n	8003b3a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	78db      	ldrb	r3, [r3, #3]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f9b2 	bl	8003e72 <RTC_Bcd2ToByte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f9a9 	bl	8003e72 <RTC_Bcd2ToByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	789b      	ldrb	r3, [r3, #2]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f9a0 	bl	8003e72 <RTC_Bcd2ToByte>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	7bdb      	ldrb	r3, [r3, #15]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	7b59      	ldrb	r1, [r3, #13]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	7b9b      	ldrb	r3, [r3, #14]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f000 fa8b 	bl	8004064 <RTC_WeekDayNum>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	7b1a      	ldrb	r2, [r3, #12]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f883 	bl	8003c6a <RTC_ReadTimeCounter>
 8003b64:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_RTC_SetDate+0x160>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0adb      	lsrs	r3, r3, #11
 8003b70:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b18      	cmp	r3, #24
 8003b76:	d93a      	bls.n	8003bee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <HAL_RTC_SetDate+0x164>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_RTC_SetDate+0x168>)
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f89a 	bl	8003cca <RTC_WriteTimeCounter>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e027      	b.n	8003bfc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f8b3 	bl	8003d18 <RTC_ReadAlarmCounter>
 8003bb2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d018      	beq.n	8003bee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d214      	bcs.n	8003bee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003bca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bce:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8b9 	bl	8003d4a <RTC_WriteAlarmCounter>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2204      	movs	r2, #4
 8003be2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e006      	b.n	8003bfc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	91a2b3c5 	.word	0x91a2b3c5
 8003c08:	aaaaaaab 	.word	0xaaaaaaab
 8003c0c:	00015180 	.word	0x00015180

08003c10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e01d      	b.n	8003c62 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003c36:	f7fe f917 	bl	8001e68 <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003c3c:	e009      	b.n	8003c52 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c3e:	f7fe f913 	bl	8001e68 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c4c:	d901      	bls.n	8003c52 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e007      	b.n	8003c62 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	827b      	strh	r3, [r7, #18]
 8003c76:	2300      	movs	r3, #0
 8003c78:	823b      	strh	r3, [r7, #16]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003c9a:	8a7a      	ldrh	r2, [r7, #18]
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d008      	beq.n	8003cb4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003ca2:	8a3b      	ldrh	r3, [r7, #16]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e004      	b.n	8003cbe <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003cb4:	8a7b      	ldrh	r3, [r7, #18]
 8003cb6:	041a      	lsls	r2, r3, #16
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f85d 	bl	8003d98 <RTC_EnterInitMode>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e011      	b.n	8003d0e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	0c12      	lsrs	r2, r2, #16
 8003cf2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f872 	bl	8003de8 <RTC_ExitInitMode>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	81fb      	strh	r3, [r7, #14]
 8003d24:	2300      	movs	r3, #0
 8003d26:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	041a      	lsls	r2, r3, #16
 8003d3c:	89bb      	ldrh	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f81d 	bl	8003d98 <RTC_EnterInitMode>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e011      	b.n	8003d8e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	0c12      	lsrs	r2, r2, #16
 8003d72:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f832 	bl	8003de8 <RTC_ExitInitMode>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003da4:	f7fe f860 	bl	8001e68 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003daa:	e009      	b.n	8003dc0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003dac:	f7fe f85c 	bl	8001e68 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dba:	d901      	bls.n	8003dc0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e00f      	b.n	8003de0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ee      	beq.n	8003dac <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0210 	orr.w	r2, r2, #16
 8003ddc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e04:	f7fe f830 	bl	8001e68 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e0a:	e009      	b.n	8003e20 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e0c:	f7fe f82c 	bl	8001e68 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1a:	d901      	bls.n	8003e20 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e007      	b.n	8003e30 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ee      	beq.n	8003e0c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003e46:	e005      	b.n	8003e54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	3b0a      	subs	r3, #10
 8003e52:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d8f6      	bhi.n	8003e48 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b2db      	uxtb	r3, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b2db      	uxtb	r3, r3
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7bdb      	ldrb	r3, [r3, #15]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7b5b      	ldrb	r3, [r3, #13]
 8003ed0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7b9b      	ldrb	r3, [r3, #14]
 8003ed6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	e06f      	b.n	8003fbe <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d011      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d00e      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d00b      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	d008      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d005      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0a      	cmp	r3, #10
 8003f00:	d002      	beq.n	8003f08 <RTC_DateUpdate+0x5c>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d117      	bne.n	8003f38 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b1e      	cmp	r3, #30
 8003f0c:	d803      	bhi.n	8003f16 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003f14:	e050      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d005      	beq.n	8003f28 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003f22:	2301      	movs	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003f26:	e047      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
          year++;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003f36:	e03f      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d008      	beq.n	8003f50 <RTC_DateUpdate+0xa4>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d005      	beq.n	8003f50 <RTC_DateUpdate+0xa4>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	d002      	beq.n	8003f50 <RTC_DateUpdate+0xa4>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b0b      	cmp	r3, #11
 8003f4e:	d10c      	bne.n	8003f6a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b1d      	cmp	r3, #29
 8003f54:	d803      	bhi.n	8003f5e <RTC_DateUpdate+0xb2>
      {
        day++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003f5c:	e02c      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003f68:	e026      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b1b      	cmp	r3, #27
 8003f74:	d803      	bhi.n	8003f7e <RTC_DateUpdate+0xd2>
      {
        day++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e01c      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b1c      	cmp	r3, #28
 8003f82:	d111      	bne.n	8003fa8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f839 	bl	8004000 <RTC_IsLeapYear>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <RTC_DateUpdate+0xf0>
        {
          day++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e00d      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e007      	b.n	8003fb8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b1d      	cmp	r3, #29
 8003fac:	d104      	bne.n	8003fb8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d38b      	bcc.n	8003ede <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f000 f83b 	bl	8004064 <RTC_WeekDayNum>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	731a      	strb	r2, [r3, #12]
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	e01d      	b.n	8004056 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	4a10      	ldr	r2, [pc, #64]	; (8004060 <RTC_IsLeapYear+0x60>)
 800401e:	fba2 1203 	umull	r1, r2, r2, r3
 8004022:	0952      	lsrs	r2, r2, #5
 8004024:	2164      	movs	r1, #100	; 0x64
 8004026:	fb01 f202 	mul.w	r2, r1, r2
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004032:	2301      	movs	r3, #1
 8004034:	e00f      	b.n	8004056 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <RTC_IsLeapYear+0x60>)
 800403a:	fba2 1203 	umull	r1, r2, r2, r3
 800403e:	09d2      	lsrs	r2, r2, #7
 8004040:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004044:	fb01 f202 	mul.w	r2, r1, r2
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004054:	2300      	movs	r3, #0
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	51eb851f 	.word	0x51eb851f

08004064 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
 8004070:	4613      	mov	r3, r2
 8004072:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004082:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d82d      	bhi.n	80040e6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <RTC_WeekDayNum+0xe4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	085a      	lsrs	r2, r3, #1
 800409e:	78bb      	ldrb	r3, [r7, #2]
 80040a0:	441a      	add	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	441a      	add	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	4926      	ldr	r1, [pc, #152]	; (800414c <RTC_WeekDayNum+0xe8>)
 80040b4:	fba1 1303 	umull	r1, r3, r1, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3b01      	subs	r3, #1
 80040c0:	4922      	ldr	r1, [pc, #136]	; (800414c <RTC_WeekDayNum+0xe8>)
 80040c2:	fba1 1303 	umull	r1, r3, r1, r3
 80040c6:	09db      	lsrs	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	4b20      	ldr	r3, [pc, #128]	; (8004150 <RTC_WeekDayNum+0xec>)
 80040ce:	fba3 1302 	umull	r1, r3, r3, r2
 80040d2:	1ad1      	subs	r1, r2, r3
 80040d4:	0849      	lsrs	r1, r1, #1
 80040d6:	440b      	add	r3, r1
 80040d8:	0899      	lsrs	r1, r3, #2
 80040da:	460b      	mov	r3, r1
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	1a5b      	subs	r3, r3, r1
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e029      	b.n	800413a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <RTC_WeekDayNum+0xe4>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	085a      	lsrs	r2, r3, #1
 80040fa:	78bb      	ldrb	r3, [r7, #2]
 80040fc:	441a      	add	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	441a      	add	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4910      	ldr	r1, [pc, #64]	; (800414c <RTC_WeekDayNum+0xe8>)
 800410c:	fba1 1303 	umull	r1, r3, r1, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	490d      	ldr	r1, [pc, #52]	; (800414c <RTC_WeekDayNum+0xe8>)
 8004118:	fba1 1303 	umull	r1, r3, r1, r3
 800411c:	09db      	lsrs	r3, r3, #7
 800411e:	4413      	add	r3, r2
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <RTC_WeekDayNum+0xec>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	1ad1      	subs	r1, r2, r3
 800412a:	0849      	lsrs	r1, r1, #1
 800412c:	440b      	add	r3, r1
 800412e:	0899      	lsrs	r1, r3, #2
 8004130:	460b      	mov	r3, r1
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a5b      	subs	r3, r3, r1
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	b2db      	uxtb	r3, r3
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	38e38e39 	.word	0x38e38e39
 800414c:	51eb851f 	.word	0x51eb851f
 8004150:	24924925 	.word	0x24924925

08004154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e076      	b.n	8004254 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004176:	d009      	beq.n	800418c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
 800417e:	e005      	b.n	800418c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fc9c 	bl	8001ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	0c1a      	lsrs	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f002 0204 	and.w	r2, r2, #4
 8004232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_SPI_Transmit+0x22>
 800427a:	2302      	movs	r3, #2
 800427c:	e126      	b.n	80044cc <HAL_SPI_Transmit+0x270>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004286:	f7fd fdef 	bl	8001e68 <HAL_GetTick>
 800428a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d002      	beq.n	80042a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042a0:	e10b      	b.n	80044ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_Transmit+0x52>
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b2:	e102      	b.n	80044ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2203      	movs	r2, #3
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d10f      	bne.n	800431c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d007      	beq.n	800433a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d14b      	bne.n	80043dc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0xf6>
 800434c:	8afb      	ldrh	r3, [r7, #22]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d13e      	bne.n	80043d0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004376:	e02b      	b.n	80043d0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d112      	bne.n	80043ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80043aa:	e011      	b.n	80043d0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ac:	f7fd fd5c 	bl	8001e68 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d803      	bhi.n	80043c4 <HAL_SPI_Transmit+0x168>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x16e>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ce:	e074      	b.n	80044ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ce      	bne.n	8004378 <HAL_SPI_Transmit+0x11c>
 80043da:	e04c      	b.n	8004476 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x18e>
 80043e4:	8afb      	ldrh	r3, [r7, #22]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d140      	bne.n	800446c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004410:	e02c      	b.n	800446c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d113      	bne.n	8004448 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	; 0x36
 8004446:	e011      	b.n	800446c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fd fd0e 	bl	8001e68 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Transmit+0x204>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x20a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	77fb      	strb	r3, [r7, #31]
          goto error;
 800446a:	e026      	b.n	80044ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1cd      	bne.n	8004412 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f8b2 	bl	80045e4 <SPI_EndRxTxTransaction>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e000      	b.n	80044ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80044b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044e4:	f7fd fcc0 	bl	8001e68 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044f4:	f7fd fcb8 	bl	8001e68 <HAL_GetTick>
 80044f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	015b      	lsls	r3, r3, #5
 8004500:	0d1b      	lsrs	r3, r3, #20
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450a:	e054      	b.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d050      	beq.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004514:	f7fd fca8 	bl	8001e68 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d902      	bls.n	800452a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d13d      	bne.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d111      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	d004      	beq.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d107      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d10f      	bne.n	8004592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e017      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d19b      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ff6a 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	f043 0220 	orr.w	r2, r3, #32
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e000      	b.n	8004618 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e041      	b.n	80046b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd fb72 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 f8e4 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_ConfigClockSource+0x18>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e0a6      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x166>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d067      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x120>
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d80b      	bhi.n	800472a <HAL_TIM_ConfigClockSource+0x6c>
 8004712:	2b10      	cmp	r3, #16
 8004714:	d073      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x140>
 8004716:	2b10      	cmp	r3, #16
 8004718:	d802      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x62>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06f      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800471e:	e078      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004720:	2b20      	cmp	r3, #32
 8004722:	d06c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x140>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d06a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004728:	e073      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800472a:	2b70      	cmp	r3, #112	; 0x70
 800472c:	d00d      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x8c>
 800472e:	2b70      	cmp	r3, #112	; 0x70
 8004730:	d804      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x7e>
 8004732:	2b50      	cmp	r3, #80	; 0x50
 8004734:	d033      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xe0>
 8004736:	2b60      	cmp	r3, #96	; 0x60
 8004738:	d041      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800473a:	e06a      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d066      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0x152>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d017      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004748:	e063      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 f940 	bl	80049de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04c      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 f929 	bl	80049de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e039      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8a0 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	; 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f8f7 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 80047bc:	e029      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f8be 	bl	800494c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	; 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f8e7 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 80047dc:	e019      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f880 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f8d7 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 80047fc:	e009      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f8ce 	bl	80049aa <TIM_ITRx_SetConfig>
        break;
 800480e:	e000      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a29      	ldr	r2, [pc, #164]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <TIM_Base_SetConfig+0xbc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a25      	ldr	r2, [pc, #148]	; (80048ec <TIM_Base_SetConfig+0xc0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d007      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_Base_SetConfig+0xbc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_Base_SetConfig+0xc0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d103      	bne.n	80048d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	615a      	str	r2, [r3, #20]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800

080048f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 030a 	bic.w	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f023 0210 	bic.w	r2, r3, #16
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004976:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004988:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f043 0307 	orr.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	609a      	str	r2, [r3, #8]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e046      	b.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d009      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10c      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000018 	.word	0x20000018

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	4e0c      	ldr	r6, [pc, #48]	; (8004b1c <__libc_init_array+0x38>)
 8004aea:	4c0d      	ldr	r4, [pc, #52]	; (8004b20 <__libc_init_array+0x3c>)
 8004aec:	1ba4      	subs	r4, r4, r6
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	42a5      	cmp	r5, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	f000 fc48 	bl	8005388 <_init>
 8004af8:	2500      	movs	r5, #0
 8004afa:	4e0a      	ldr	r6, [pc, #40]	; (8004b24 <__libc_init_array+0x40>)
 8004afc:	4c0a      	ldr	r4, [pc, #40]	; (8004b28 <__libc_init_array+0x44>)
 8004afe:	1ba4      	subs	r4, r4, r6
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	42a5      	cmp	r5, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b0c:	4798      	blx	r3
 8004b0e:	3501      	adds	r5, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b16:	4798      	blx	r3
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	080081a8 	.word	0x080081a8
 8004b20:	080081a8 	.word	0x080081a8
 8004b24:	080081a8 	.word	0x080081a8
 8004b28:	080081ac 	.word	0x080081ac

08004b2c <memset>:
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4402      	add	r2, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <sniprintf>:
 8004b3c:	b40c      	push	{r2, r3}
 8004b3e:	b530      	push	{r4, r5, lr}
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <sniprintf+0x64>)
 8004b42:	1e0c      	subs	r4, r1, #0
 8004b44:	b09d      	sub	sp, #116	; 0x74
 8004b46:	681d      	ldr	r5, [r3, #0]
 8004b48:	da08      	bge.n	8004b5c <sniprintf+0x20>
 8004b4a:	238b      	movs	r3, #139	; 0x8b
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	b01d      	add	sp, #116	; 0x74
 8004b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b58:	b002      	add	sp, #8
 8004b5a:	4770      	bx	lr
 8004b5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b64:	bf0c      	ite	eq
 8004b66:	4623      	moveq	r3, r4
 8004b68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	9307      	str	r3, [sp, #28]
 8004b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b74:	9002      	str	r0, [sp, #8]
 8004b76:	9006      	str	r0, [sp, #24]
 8004b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b7e:	ab21      	add	r3, sp, #132	; 0x84
 8004b80:	a902      	add	r1, sp, #8
 8004b82:	4628      	mov	r0, r5
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	f000 f867 	bl	8004c58 <_svfiprintf_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	bfbc      	itt	lt
 8004b8e:	238b      	movlt	r3, #139	; 0x8b
 8004b90:	602b      	strlt	r3, [r5, #0]
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d0dd      	beq.n	8004b52 <sniprintf+0x16>
 8004b96:	2200      	movs	r2, #0
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e7d9      	b.n	8004b52 <sniprintf+0x16>
 8004b9e:	bf00      	nop
 8004ba0:	20000018 	.word	0x20000018

08004ba4 <__ssputs_r>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	688e      	ldr	r6, [r1, #8]
 8004baa:	4682      	mov	sl, r0
 8004bac:	429e      	cmp	r6, r3
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4690      	mov	r8, r2
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	d837      	bhi.n	8004c26 <__ssputs_r+0x82>
 8004bb6:	898a      	ldrh	r2, [r1, #12]
 8004bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bbc:	d031      	beq.n	8004c22 <__ssputs_r+0x7e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	6909      	ldr	r1, [r1, #16]
 8004bc4:	1a6f      	subs	r7, r5, r1
 8004bc6:	6965      	ldr	r5, [r4, #20]
 8004bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004bd0:	f109 0301 	add.w	r3, r9, #1
 8004bd4:	443b      	add	r3, r7
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	bf38      	it	cc
 8004bda:	461d      	movcc	r5, r3
 8004bdc:	0553      	lsls	r3, r2, #21
 8004bde:	d530      	bpl.n	8004c42 <__ssputs_r+0x9e>
 8004be0:	4629      	mov	r1, r5
 8004be2:	f000 fb37 	bl	8005254 <_malloc_r>
 8004be6:	4606      	mov	r6, r0
 8004be8:	b950      	cbnz	r0, 8004c00 <__ssputs_r+0x5c>
 8004bea:	230c      	movs	r3, #12
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	f8ca 3000 	str.w	r3, [sl]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	463a      	mov	r2, r7
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	f000 fab6 	bl	8005174 <memcpy>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	6126      	str	r6, [r4, #16]
 8004c16:	443e      	add	r6, r7
 8004c18:	6026      	str	r6, [r4, #0]
 8004c1a:	464e      	mov	r6, r9
 8004c1c:	6165      	str	r5, [r4, #20]
 8004c1e:	1bed      	subs	r5, r5, r7
 8004c20:	60a5      	str	r5, [r4, #8]
 8004c22:	454e      	cmp	r6, r9
 8004c24:	d900      	bls.n	8004c28 <__ssputs_r+0x84>
 8004c26:	464e      	mov	r6, r9
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	f000 faac 	bl	800518a <memmove>
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	2000      	movs	r0, #0
 8004c36:	1b9b      	subs	r3, r3, r6
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	441e      	add	r6, r3
 8004c3e:	6026      	str	r6, [r4, #0]
 8004c40:	e7dc      	b.n	8004bfc <__ssputs_r+0x58>
 8004c42:	462a      	mov	r2, r5
 8004c44:	f000 fb60 	bl	8005308 <_realloc_r>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1e2      	bne.n	8004c14 <__ssputs_r+0x70>
 8004c4e:	6921      	ldr	r1, [r4, #16]
 8004c50:	4650      	mov	r0, sl
 8004c52:	f000 fab3 	bl	80051bc <_free_r>
 8004c56:	e7c8      	b.n	8004bea <__ssputs_r+0x46>

08004c58 <_svfiprintf_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	898b      	ldrh	r3, [r1, #12]
 8004c60:	b09d      	sub	sp, #116	; 0x74
 8004c62:	061f      	lsls	r7, r3, #24
 8004c64:	4680      	mov	r8, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4616      	mov	r6, r2
 8004c6a:	d50f      	bpl.n	8004c8c <_svfiprintf_r+0x34>
 8004c6c:	690b      	ldr	r3, [r1, #16]
 8004c6e:	b96b      	cbnz	r3, 8004c8c <_svfiprintf_r+0x34>
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	f000 faef 	bl	8005254 <_malloc_r>
 8004c76:	6020      	str	r0, [r4, #0]
 8004c78:	6120      	str	r0, [r4, #16]
 8004c7a:	b928      	cbnz	r0, 8004c88 <_svfiprintf_r+0x30>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	f8c8 3000 	str.w	r3, [r8]
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	e0c8      	b.n	8004e1a <_svfiprintf_r+0x1c2>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c90:	2320      	movs	r3, #32
 8004c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c96:	2330      	movs	r3, #48	; 0x30
 8004c98:	f04f 0b01 	mov.w	fp, #1
 8004c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ca0:	9503      	str	r5, [sp, #12]
 8004ca2:	4637      	mov	r7, r6
 8004ca4:	463d      	mov	r5, r7
 8004ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004caa:	b10b      	cbz	r3, 8004cb0 <_svfiprintf_r+0x58>
 8004cac:	2b25      	cmp	r3, #37	; 0x25
 8004cae:	d13e      	bne.n	8004d2e <_svfiprintf_r+0xd6>
 8004cb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x76>
 8004cb6:	4653      	mov	r3, sl
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f7ff ff71 	bl	8004ba4 <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80a4 	beq.w	8004e10 <_svfiprintf_r+0x1b8>
 8004cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cca:	4453      	add	r3, sl
 8004ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cce:	783b      	ldrb	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 809d 	beq.w	8004e10 <_svfiprintf_r+0x1b8>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	9307      	str	r3, [sp, #28]
 8004ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8004cea:	462f      	mov	r7, r5
 8004cec:	2205      	movs	r2, #5
 8004cee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004cf2:	4850      	ldr	r0, [pc, #320]	; (8004e34 <_svfiprintf_r+0x1dc>)
 8004cf4:	f000 fa30 	bl	8005158 <memchr>
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	b9d0      	cbnz	r0, 8004d32 <_svfiprintf_r+0xda>
 8004cfc:	06d9      	lsls	r1, r3, #27
 8004cfe:	bf44      	itt	mi
 8004d00:	2220      	movmi	r2, #32
 8004d02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d06:	071a      	lsls	r2, r3, #28
 8004d08:	bf44      	itt	mi
 8004d0a:	222b      	movmi	r2, #43	; 0x2b
 8004d0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d10:	782a      	ldrb	r2, [r5, #0]
 8004d12:	2a2a      	cmp	r2, #42	; 0x2a
 8004d14:	d015      	beq.n	8004d42 <_svfiprintf_r+0xea>
 8004d16:	462f      	mov	r7, r5
 8004d18:	2000      	movs	r0, #0
 8004d1a:	250a      	movs	r5, #10
 8004d1c:	9a07      	ldr	r2, [sp, #28]
 8004d1e:	4639      	mov	r1, r7
 8004d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d24:	3b30      	subs	r3, #48	; 0x30
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d94d      	bls.n	8004dc6 <_svfiprintf_r+0x16e>
 8004d2a:	b1b8      	cbz	r0, 8004d5c <_svfiprintf_r+0x104>
 8004d2c:	e00f      	b.n	8004d4e <_svfiprintf_r+0xf6>
 8004d2e:	462f      	mov	r7, r5
 8004d30:	e7b8      	b.n	8004ca4 <_svfiprintf_r+0x4c>
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <_svfiprintf_r+0x1dc>)
 8004d34:	463d      	mov	r5, r7
 8004d36:	1a80      	subs	r0, r0, r2
 8004d38:	fa0b f000 	lsl.w	r0, fp, r0
 8004d3c:	4318      	orrs	r0, r3
 8004d3e:	9004      	str	r0, [sp, #16]
 8004d40:	e7d3      	b.n	8004cea <_svfiprintf_r+0x92>
 8004d42:	9a03      	ldr	r2, [sp, #12]
 8004d44:	1d11      	adds	r1, r2, #4
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	9103      	str	r1, [sp, #12]
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	db01      	blt.n	8004d52 <_svfiprintf_r+0xfa>
 8004d4e:	9207      	str	r2, [sp, #28]
 8004d50:	e004      	b.n	8004d5c <_svfiprintf_r+0x104>
 8004d52:	4252      	negs	r2, r2
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	9207      	str	r2, [sp, #28]
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	783b      	ldrb	r3, [r7, #0]
 8004d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d60:	d10c      	bne.n	8004d7c <_svfiprintf_r+0x124>
 8004d62:	787b      	ldrb	r3, [r7, #1]
 8004d64:	2b2a      	cmp	r3, #42	; 0x2a
 8004d66:	d133      	bne.n	8004dd0 <_svfiprintf_r+0x178>
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	3702      	adds	r7, #2
 8004d6c:	1d1a      	adds	r2, r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	9203      	str	r2, [sp, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfb8      	it	lt
 8004d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d7a:	9305      	str	r3, [sp, #20]
 8004d7c:	4d2e      	ldr	r5, [pc, #184]	; (8004e38 <_svfiprintf_r+0x1e0>)
 8004d7e:	2203      	movs	r2, #3
 8004d80:	7839      	ldrb	r1, [r7, #0]
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f9e8 	bl	8005158 <memchr>
 8004d88:	b138      	cbz	r0, 8004d9a <_svfiprintf_r+0x142>
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d92:	9b04      	ldr	r3, [sp, #16]
 8004d94:	3701      	adds	r7, #1
 8004d96:	4303      	orrs	r3, r0
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	7839      	ldrb	r1, [r7, #0]
 8004d9c:	2206      	movs	r2, #6
 8004d9e:	4827      	ldr	r0, [pc, #156]	; (8004e3c <_svfiprintf_r+0x1e4>)
 8004da0:	1c7e      	adds	r6, r7, #1
 8004da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da6:	f000 f9d7 	bl	8005158 <memchr>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d038      	beq.n	8004e20 <_svfiprintf_r+0x1c8>
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <_svfiprintf_r+0x1e8>)
 8004db0:	bb13      	cbnz	r3, 8004df8 <_svfiprintf_r+0x1a0>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	3307      	adds	r3, #7
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	3308      	adds	r3, #8
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc0:	444b      	add	r3, r9
 8004dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc4:	e76d      	b.n	8004ca2 <_svfiprintf_r+0x4a>
 8004dc6:	fb05 3202 	mla	r2, r5, r2, r3
 8004dca:	2001      	movs	r0, #1
 8004dcc:	460f      	mov	r7, r1
 8004dce:	e7a6      	b.n	8004d1e <_svfiprintf_r+0xc6>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	250a      	movs	r5, #10
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	3701      	adds	r7, #1
 8004dd8:	9305      	str	r3, [sp, #20]
 8004dda:	4638      	mov	r0, r7
 8004ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de0:	3a30      	subs	r2, #48	; 0x30
 8004de2:	2a09      	cmp	r2, #9
 8004de4:	d903      	bls.n	8004dee <_svfiprintf_r+0x196>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0c8      	beq.n	8004d7c <_svfiprintf_r+0x124>
 8004dea:	9105      	str	r1, [sp, #20]
 8004dec:	e7c6      	b.n	8004d7c <_svfiprintf_r+0x124>
 8004dee:	fb05 2101 	mla	r1, r5, r1, r2
 8004df2:	2301      	movs	r3, #1
 8004df4:	4607      	mov	r7, r0
 8004df6:	e7f0      	b.n	8004dda <_svfiprintf_r+0x182>
 8004df8:	ab03      	add	r3, sp, #12
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <_svfiprintf_r+0x1ec>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	4640      	mov	r0, r8
 8004e04:	f3af 8000 	nop.w
 8004e08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	d1d6      	bne.n	8004dbe <_svfiprintf_r+0x166>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	065b      	lsls	r3, r3, #25
 8004e14:	f53f af35 	bmi.w	8004c82 <_svfiprintf_r+0x2a>
 8004e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e1a:	b01d      	add	sp, #116	; 0x74
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	4622      	mov	r2, r4
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <_svfiprintf_r+0x1ec>)
 8004e28:	a904      	add	r1, sp, #16
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f000 f882 	bl	8004f34 <_printf_i>
 8004e30:	e7ea      	b.n	8004e08 <_svfiprintf_r+0x1b0>
 8004e32:	bf00      	nop
 8004e34:	08008174 	.word	0x08008174
 8004e38:	0800817a 	.word	0x0800817a
 8004e3c:	0800817e 	.word	0x0800817e
 8004e40:	00000000 	.word	0x00000000
 8004e44:	08004ba5 	.word	0x08004ba5

08004e48 <_printf_common>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	4691      	mov	r9, r2
 8004e4e:	461f      	mov	r7, r3
 8004e50:	688a      	ldr	r2, [r1, #8]
 8004e52:	690b      	ldr	r3, [r1, #16]
 8004e54:	4606      	mov	r6, r0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfb8      	it	lt
 8004e5a:	4613      	movlt	r3, r2
 8004e5c:	f8c9 3000 	str.w	r3, [r9]
 8004e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e64:	460c      	mov	r4, r1
 8004e66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e6a:	b112      	cbz	r2, 8004e72 <_printf_common+0x2a>
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f8c9 3000 	str.w	r3, [r9]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	0699      	lsls	r1, r3, #26
 8004e76:	bf42      	ittt	mi
 8004e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e7c:	3302      	addmi	r3, #2
 8004e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	f015 0506 	ands.w	r5, r5, #6
 8004e88:	d107      	bne.n	8004e9a <_printf_common+0x52>
 8004e8a:	f104 0a19 	add.w	sl, r4, #25
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	f8d9 2000 	ldr.w	r2, [r9]
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	dc29      	bgt.n	8004eee <_printf_common+0xa6>
 8004e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	3300      	adds	r3, #0
 8004ea2:	bf18      	it	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	0692      	lsls	r2, r2, #26
 8004ea8:	d42e      	bmi.n	8004f08 <_printf_common+0xc0>
 8004eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eae:	4639      	mov	r1, r7
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	47c0      	blx	r8
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d021      	beq.n	8004efc <_printf_common+0xb4>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	68e5      	ldr	r5, [r4, #12]
 8004ebc:	f003 0306 	and.w	r3, r3, #6
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	bf18      	it	ne
 8004ec4:	2500      	movne	r5, #0
 8004ec6:	f8d9 2000 	ldr.w	r2, [r9]
 8004eca:	f04f 0900 	mov.w	r9, #0
 8004ece:	bf08      	it	eq
 8004ed0:	1aad      	subeq	r5, r5, r2
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	bf08      	it	eq
 8004ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bfc4      	itt	gt
 8004ee0:	1a9b      	subgt	r3, r3, r2
 8004ee2:	18ed      	addgt	r5, r5, r3
 8004ee4:	341a      	adds	r4, #26
 8004ee6:	454d      	cmp	r5, r9
 8004ee8:	d11a      	bne.n	8004f20 <_printf_common+0xd8>
 8004eea:	2000      	movs	r0, #0
 8004eec:	e008      	b.n	8004f00 <_printf_common+0xb8>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	47c0      	blx	r8
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d103      	bne.n	8004f04 <_printf_common+0xbc>
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	3501      	adds	r5, #1
 8004f06:	e7c2      	b.n	8004e8e <_printf_common+0x46>
 8004f08:	2030      	movs	r0, #48	; 0x30
 8004f0a:	18e1      	adds	r1, r4, r3
 8004f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f16:	4422      	add	r2, r4
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f1e:	e7c4      	b.n	8004eaa <_printf_common+0x62>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4622      	mov	r2, r4
 8004f24:	4639      	mov	r1, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d0e6      	beq.n	8004efc <_printf_common+0xb4>
 8004f2e:	f109 0901 	add.w	r9, r9, #1
 8004f32:	e7d8      	b.n	8004ee6 <_printf_common+0x9e>

08004f34 <_printf_i>:
 8004f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	7e09      	ldrb	r1, [r1, #24]
 8004f40:	b085      	sub	sp, #20
 8004f42:	296e      	cmp	r1, #110	; 0x6e
 8004f44:	4617      	mov	r7, r2
 8004f46:	4606      	mov	r6, r0
 8004f48:	4698      	mov	r8, r3
 8004f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f4c:	f000 80b3 	beq.w	80050b6 <_printf_i+0x182>
 8004f50:	d822      	bhi.n	8004f98 <_printf_i+0x64>
 8004f52:	2963      	cmp	r1, #99	; 0x63
 8004f54:	d036      	beq.n	8004fc4 <_printf_i+0x90>
 8004f56:	d80a      	bhi.n	8004f6e <_printf_i+0x3a>
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	f000 80b9 	beq.w	80050d0 <_printf_i+0x19c>
 8004f5e:	2958      	cmp	r1, #88	; 0x58
 8004f60:	f000 8083 	beq.w	800506a <_printf_i+0x136>
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f6c:	e032      	b.n	8004fd4 <_printf_i+0xa0>
 8004f6e:	2964      	cmp	r1, #100	; 0x64
 8004f70:	d001      	beq.n	8004f76 <_printf_i+0x42>
 8004f72:	2969      	cmp	r1, #105	; 0x69
 8004f74:	d1f6      	bne.n	8004f64 <_printf_i+0x30>
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	0605      	lsls	r5, r0, #24
 8004f7c:	f103 0104 	add.w	r1, r3, #4
 8004f80:	d52a      	bpl.n	8004fd8 <_printf_i+0xa4>
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da03      	bge.n	8004f92 <_printf_i+0x5e>
 8004f8a:	222d      	movs	r2, #45	; 0x2d
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f92:	486f      	ldr	r0, [pc, #444]	; (8005150 <_printf_i+0x21c>)
 8004f94:	220a      	movs	r2, #10
 8004f96:	e039      	b.n	800500c <_printf_i+0xd8>
 8004f98:	2973      	cmp	r1, #115	; 0x73
 8004f9a:	f000 809d 	beq.w	80050d8 <_printf_i+0x1a4>
 8004f9e:	d808      	bhi.n	8004fb2 <_printf_i+0x7e>
 8004fa0:	296f      	cmp	r1, #111	; 0x6f
 8004fa2:	d020      	beq.n	8004fe6 <_printf_i+0xb2>
 8004fa4:	2970      	cmp	r1, #112	; 0x70
 8004fa6:	d1dd      	bne.n	8004f64 <_printf_i+0x30>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	e003      	b.n	8004fba <_printf_i+0x86>
 8004fb2:	2975      	cmp	r1, #117	; 0x75
 8004fb4:	d017      	beq.n	8004fe6 <_printf_i+0xb2>
 8004fb6:	2978      	cmp	r1, #120	; 0x78
 8004fb8:	d1d4      	bne.n	8004f64 <_printf_i+0x30>
 8004fba:	2378      	movs	r3, #120	; 0x78
 8004fbc:	4865      	ldr	r0, [pc, #404]	; (8005154 <_printf_i+0x220>)
 8004fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc2:	e055      	b.n	8005070 <_printf_i+0x13c>
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fca:	1d19      	adds	r1, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6011      	str	r1, [r2, #0]
 8004fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e08c      	b.n	80050f2 <_printf_i+0x1be>
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fde:	6011      	str	r1, [r2, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	b21b      	sxthne	r3, r3
 8004fe4:	e7cf      	b.n	8004f86 <_printf_i+0x52>
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	6825      	ldr	r5, [r4, #0]
 8004fea:	1d18      	adds	r0, r3, #4
 8004fec:	6010      	str	r0, [r2, #0]
 8004fee:	0628      	lsls	r0, r5, #24
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_i+0xc2>
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	e002      	b.n	8004ffc <_printf_i+0xc8>
 8004ff6:	0668      	lsls	r0, r5, #25
 8004ff8:	d5fb      	bpl.n	8004ff2 <_printf_i+0xbe>
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	296f      	cmp	r1, #111	; 0x6f
 8004ffe:	bf14      	ite	ne
 8005000:	220a      	movne	r2, #10
 8005002:	2208      	moveq	r2, #8
 8005004:	4852      	ldr	r0, [pc, #328]	; (8005150 <_printf_i+0x21c>)
 8005006:	2100      	movs	r1, #0
 8005008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800500c:	6865      	ldr	r5, [r4, #4]
 800500e:	2d00      	cmp	r5, #0
 8005010:	60a5      	str	r5, [r4, #8]
 8005012:	f2c0 8095 	blt.w	8005140 <_printf_i+0x20c>
 8005016:	6821      	ldr	r1, [r4, #0]
 8005018:	f021 0104 	bic.w	r1, r1, #4
 800501c:	6021      	str	r1, [r4, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d13d      	bne.n	800509e <_printf_i+0x16a>
 8005022:	2d00      	cmp	r5, #0
 8005024:	f040 808e 	bne.w	8005144 <_printf_i+0x210>
 8005028:	4665      	mov	r5, ip
 800502a:	2a08      	cmp	r2, #8
 800502c:	d10b      	bne.n	8005046 <_printf_i+0x112>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	07db      	lsls	r3, r3, #31
 8005032:	d508      	bpl.n	8005046 <_printf_i+0x112>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	bfde      	ittt	le
 800503c:	2330      	movle	r3, #48	; 0x30
 800503e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005046:	ebac 0305 	sub.w	r3, ip, r5
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	f8cd 8000 	str.w	r8, [sp]
 8005050:	463b      	mov	r3, r7
 8005052:	aa03      	add	r2, sp, #12
 8005054:	4621      	mov	r1, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff fef6 	bl	8004e48 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	d14d      	bne.n	80050fc <_printf_i+0x1c8>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	b005      	add	sp, #20
 8005066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800506a:	4839      	ldr	r0, [pc, #228]	; (8005150 <_printf_i+0x21c>)
 800506c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	6821      	ldr	r1, [r4, #0]
 8005074:	1d1d      	adds	r5, r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6015      	str	r5, [r2, #0]
 800507a:	060a      	lsls	r2, r1, #24
 800507c:	d50b      	bpl.n	8005096 <_printf_i+0x162>
 800507e:	07ca      	lsls	r2, r1, #31
 8005080:	bf44      	itt	mi
 8005082:	f041 0120 	orrmi.w	r1, r1, #32
 8005086:	6021      	strmi	r1, [r4, #0]
 8005088:	b91b      	cbnz	r3, 8005092 <_printf_i+0x15e>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	f022 0220 	bic.w	r2, r2, #32
 8005090:	6022      	str	r2, [r4, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	e7b7      	b.n	8005006 <_printf_i+0xd2>
 8005096:	064d      	lsls	r5, r1, #25
 8005098:	bf48      	it	mi
 800509a:	b29b      	uxthmi	r3, r3
 800509c:	e7ef      	b.n	800507e <_printf_i+0x14a>
 800509e:	4665      	mov	r5, ip
 80050a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050a4:	fb02 3311 	mls	r3, r2, r1, r3
 80050a8:	5cc3      	ldrb	r3, [r0, r3]
 80050aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050ae:	460b      	mov	r3, r1
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d1f5      	bne.n	80050a0 <_printf_i+0x16c>
 80050b4:	e7b9      	b.n	800502a <_printf_i+0xf6>
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1d18      	adds	r0, r3, #4
 80050bc:	6961      	ldr	r1, [r4, #20]
 80050be:	6010      	str	r0, [r2, #0]
 80050c0:	0628      	lsls	r0, r5, #24
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	d501      	bpl.n	80050ca <_printf_i+0x196>
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	e002      	b.n	80050d0 <_printf_i+0x19c>
 80050ca:	066a      	lsls	r2, r5, #25
 80050cc:	d5fb      	bpl.n	80050c6 <_printf_i+0x192>
 80050ce:	8019      	strh	r1, [r3, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	4665      	mov	r5, ip
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	e7b9      	b.n	800504c <_printf_i+0x118>
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	1d19      	adds	r1, r3, #4
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	681d      	ldr	r5, [r3, #0]
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	2100      	movs	r1, #0
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f837 	bl	8005158 <memchr>
 80050ea:	b108      	cbz	r0, 80050f0 <_printf_i+0x1bc>
 80050ec:	1b40      	subs	r0, r0, r5
 80050ee:	6060      	str	r0, [r4, #4]
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	2300      	movs	r3, #0
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fa:	e7a7      	b.n	800504c <_printf_i+0x118>
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	462a      	mov	r2, r5
 8005100:	4639      	mov	r1, r7
 8005102:	4630      	mov	r0, r6
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d0aa      	beq.n	8005060 <_printf_i+0x12c>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	079b      	lsls	r3, r3, #30
 800510e:	d413      	bmi.n	8005138 <_printf_i+0x204>
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	4298      	cmp	r0, r3
 8005116:	bfb8      	it	lt
 8005118:	4618      	movlt	r0, r3
 800511a:	e7a3      	b.n	8005064 <_printf_i+0x130>
 800511c:	2301      	movs	r3, #1
 800511e:	464a      	mov	r2, r9
 8005120:	4639      	mov	r1, r7
 8005122:	4630      	mov	r0, r6
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d09a      	beq.n	8005060 <_printf_i+0x12c>
 800512a:	3501      	adds	r5, #1
 800512c:	68e3      	ldr	r3, [r4, #12]
 800512e:	9a03      	ldr	r2, [sp, #12]
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	42ab      	cmp	r3, r5
 8005134:	dcf2      	bgt.n	800511c <_printf_i+0x1e8>
 8005136:	e7eb      	b.n	8005110 <_printf_i+0x1dc>
 8005138:	2500      	movs	r5, #0
 800513a:	f104 0919 	add.w	r9, r4, #25
 800513e:	e7f5      	b.n	800512c <_printf_i+0x1f8>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ac      	bne.n	800509e <_printf_i+0x16a>
 8005144:	7803      	ldrb	r3, [r0, #0]
 8005146:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800514a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800514e:	e76c      	b.n	800502a <_printf_i+0xf6>
 8005150:	08008185 	.word	0x08008185
 8005154:	08008196 	.word	0x08008196

08005158 <memchr>:
 8005158:	b510      	push	{r4, lr}
 800515a:	b2c9      	uxtb	r1, r1
 800515c:	4402      	add	r2, r0
 800515e:	4290      	cmp	r0, r2
 8005160:	4603      	mov	r3, r0
 8005162:	d101      	bne.n	8005168 <memchr+0x10>
 8005164:	2300      	movs	r3, #0
 8005166:	e003      	b.n	8005170 <memchr+0x18>
 8005168:	781c      	ldrb	r4, [r3, #0]
 800516a:	3001      	adds	r0, #1
 800516c:	428c      	cmp	r4, r1
 800516e:	d1f6      	bne.n	800515e <memchr+0x6>
 8005170:	4618      	mov	r0, r3
 8005172:	bd10      	pop	{r4, pc}

08005174 <memcpy>:
 8005174:	b510      	push	{r4, lr}
 8005176:	1e43      	subs	r3, r0, #1
 8005178:	440a      	add	r2, r1
 800517a:	4291      	cmp	r1, r2
 800517c:	d100      	bne.n	8005180 <memcpy+0xc>
 800517e:	bd10      	pop	{r4, pc}
 8005180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005188:	e7f7      	b.n	800517a <memcpy+0x6>

0800518a <memmove>:
 800518a:	4288      	cmp	r0, r1
 800518c:	b510      	push	{r4, lr}
 800518e:	eb01 0302 	add.w	r3, r1, r2
 8005192:	d807      	bhi.n	80051a4 <memmove+0x1a>
 8005194:	1e42      	subs	r2, r0, #1
 8005196:	4299      	cmp	r1, r3
 8005198:	d00a      	beq.n	80051b0 <memmove+0x26>
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051a2:	e7f8      	b.n	8005196 <memmove+0xc>
 80051a4:	4283      	cmp	r3, r0
 80051a6:	d9f5      	bls.n	8005194 <memmove+0xa>
 80051a8:	1881      	adds	r1, r0, r2
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	42d3      	cmn	r3, r2
 80051ae:	d100      	bne.n	80051b2 <memmove+0x28>
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051ba:	e7f7      	b.n	80051ac <memmove+0x22>

080051bc <_free_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d043      	beq.n	800524c <_free_r+0x90>
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfb8      	it	lt
 80051ce:	18e4      	addlt	r4, r4, r3
 80051d0:	f000 f8d0 	bl	8005374 <__malloc_lock>
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <_free_r+0x94>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	4610      	mov	r0, r2
 80051da:	b933      	cbnz	r3, 80051ea <_free_r+0x2e>
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6014      	str	r4, [r2, #0]
 80051e0:	4628      	mov	r0, r5
 80051e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e6:	f000 b8c6 	b.w	8005376 <__malloc_unlock>
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	d90b      	bls.n	8005206 <_free_r+0x4a>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1862      	adds	r2, r4, r1
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bf01      	itttt	eq
 80051f6:	681a      	ldreq	r2, [r3, #0]
 80051f8:	685b      	ldreq	r3, [r3, #4]
 80051fa:	1852      	addeq	r2, r2, r1
 80051fc:	6022      	streq	r2, [r4, #0]
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6004      	str	r4, [r0, #0]
 8005202:	e7ed      	b.n	80051e0 <_free_r+0x24>
 8005204:	4613      	mov	r3, r2
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	b10a      	cbz	r2, 800520e <_free_r+0x52>
 800520a:	42a2      	cmp	r2, r4
 800520c:	d9fa      	bls.n	8005204 <_free_r+0x48>
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	1858      	adds	r0, r3, r1
 8005212:	42a0      	cmp	r0, r4
 8005214:	d10b      	bne.n	800522e <_free_r+0x72>
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	4401      	add	r1, r0
 800521a:	1858      	adds	r0, r3, r1
 800521c:	4282      	cmp	r2, r0
 800521e:	6019      	str	r1, [r3, #0]
 8005220:	d1de      	bne.n	80051e0 <_free_r+0x24>
 8005222:	6810      	ldr	r0, [r2, #0]
 8005224:	6852      	ldr	r2, [r2, #4]
 8005226:	4401      	add	r1, r0
 8005228:	6019      	str	r1, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e7d8      	b.n	80051e0 <_free_r+0x24>
 800522e:	d902      	bls.n	8005236 <_free_r+0x7a>
 8005230:	230c      	movs	r3, #12
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	e7d4      	b.n	80051e0 <_free_r+0x24>
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	1821      	adds	r1, r4, r0
 800523a:	428a      	cmp	r2, r1
 800523c:	bf01      	itttt	eq
 800523e:	6811      	ldreq	r1, [r2, #0]
 8005240:	6852      	ldreq	r2, [r2, #4]
 8005242:	1809      	addeq	r1, r1, r0
 8005244:	6021      	streq	r1, [r4, #0]
 8005246:	6062      	str	r2, [r4, #4]
 8005248:	605c      	str	r4, [r3, #4]
 800524a:	e7c9      	b.n	80051e0 <_free_r+0x24>
 800524c:	bd38      	pop	{r3, r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	200000e4 	.word	0x200000e4

08005254 <_malloc_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	1ccd      	adds	r5, r1, #3
 8005258:	f025 0503 	bic.w	r5, r5, #3
 800525c:	3508      	adds	r5, #8
 800525e:	2d0c      	cmp	r5, #12
 8005260:	bf38      	it	cc
 8005262:	250c      	movcc	r5, #12
 8005264:	2d00      	cmp	r5, #0
 8005266:	4606      	mov	r6, r0
 8005268:	db01      	blt.n	800526e <_malloc_r+0x1a>
 800526a:	42a9      	cmp	r1, r5
 800526c:	d903      	bls.n	8005276 <_malloc_r+0x22>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	2000      	movs	r0, #0
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	f000 f87d 	bl	8005374 <__malloc_lock>
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <_malloc_r+0xac>)
 800527c:	6814      	ldr	r4, [r2, #0]
 800527e:	4621      	mov	r1, r4
 8005280:	b991      	cbnz	r1, 80052a8 <_malloc_r+0x54>
 8005282:	4c20      	ldr	r4, [pc, #128]	; (8005304 <_malloc_r+0xb0>)
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	b91b      	cbnz	r3, 8005290 <_malloc_r+0x3c>
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f863 	bl	8005354 <_sbrk_r>
 800528e:	6020      	str	r0, [r4, #0]
 8005290:	4629      	mov	r1, r5
 8005292:	4630      	mov	r0, r6
 8005294:	f000 f85e 	bl	8005354 <_sbrk_r>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d124      	bne.n	80052e6 <_malloc_r+0x92>
 800529c:	230c      	movs	r3, #12
 800529e:	4630      	mov	r0, r6
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	f000 f868 	bl	8005376 <__malloc_unlock>
 80052a6:	e7e4      	b.n	8005272 <_malloc_r+0x1e>
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	1b5b      	subs	r3, r3, r5
 80052ac:	d418      	bmi.n	80052e0 <_malloc_r+0x8c>
 80052ae:	2b0b      	cmp	r3, #11
 80052b0:	d90f      	bls.n	80052d2 <_malloc_r+0x7e>
 80052b2:	600b      	str	r3, [r1, #0]
 80052b4:	18cc      	adds	r4, r1, r3
 80052b6:	50cd      	str	r5, [r1, r3]
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 f85c 	bl	8005376 <__malloc_unlock>
 80052be:	f104 000b 	add.w	r0, r4, #11
 80052c2:	1d23      	adds	r3, r4, #4
 80052c4:	f020 0007 	bic.w	r0, r0, #7
 80052c8:	1ac3      	subs	r3, r0, r3
 80052ca:	d0d3      	beq.n	8005274 <_malloc_r+0x20>
 80052cc:	425a      	negs	r2, r3
 80052ce:	50e2      	str	r2, [r4, r3]
 80052d0:	e7d0      	b.n	8005274 <_malloc_r+0x20>
 80052d2:	684b      	ldr	r3, [r1, #4]
 80052d4:	428c      	cmp	r4, r1
 80052d6:	bf16      	itet	ne
 80052d8:	6063      	strne	r3, [r4, #4]
 80052da:	6013      	streq	r3, [r2, #0]
 80052dc:	460c      	movne	r4, r1
 80052de:	e7eb      	b.n	80052b8 <_malloc_r+0x64>
 80052e0:	460c      	mov	r4, r1
 80052e2:	6849      	ldr	r1, [r1, #4]
 80052e4:	e7cc      	b.n	8005280 <_malloc_r+0x2c>
 80052e6:	1cc4      	adds	r4, r0, #3
 80052e8:	f024 0403 	bic.w	r4, r4, #3
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	d005      	beq.n	80052fc <_malloc_r+0xa8>
 80052f0:	1a21      	subs	r1, r4, r0
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f82e 	bl	8005354 <_sbrk_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d0cf      	beq.n	800529c <_malloc_r+0x48>
 80052fc:	6025      	str	r5, [r4, #0]
 80052fe:	e7db      	b.n	80052b8 <_malloc_r+0x64>
 8005300:	200000e4 	.word	0x200000e4
 8005304:	200000e8 	.word	0x200000e8

08005308 <_realloc_r>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	4607      	mov	r7, r0
 800530c:	4614      	mov	r4, r2
 800530e:	460e      	mov	r6, r1
 8005310:	b921      	cbnz	r1, 800531c <_realloc_r+0x14>
 8005312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005316:	4611      	mov	r1, r2
 8005318:	f7ff bf9c 	b.w	8005254 <_malloc_r>
 800531c:	b922      	cbnz	r2, 8005328 <_realloc_r+0x20>
 800531e:	f7ff ff4d 	bl	80051bc <_free_r>
 8005322:	4625      	mov	r5, r4
 8005324:	4628      	mov	r0, r5
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	f000 f826 	bl	8005378 <_malloc_usable_size_r>
 800532c:	42a0      	cmp	r0, r4
 800532e:	d20f      	bcs.n	8005350 <_realloc_r+0x48>
 8005330:	4621      	mov	r1, r4
 8005332:	4638      	mov	r0, r7
 8005334:	f7ff ff8e 	bl	8005254 <_malloc_r>
 8005338:	4605      	mov	r5, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d0f2      	beq.n	8005324 <_realloc_r+0x1c>
 800533e:	4631      	mov	r1, r6
 8005340:	4622      	mov	r2, r4
 8005342:	f7ff ff17 	bl	8005174 <memcpy>
 8005346:	4631      	mov	r1, r6
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff37 	bl	80051bc <_free_r>
 800534e:	e7e9      	b.n	8005324 <_realloc_r+0x1c>
 8005350:	4635      	mov	r5, r6
 8005352:	e7e7      	b.n	8005324 <_realloc_r+0x1c>

08005354 <_sbrk_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	2300      	movs	r3, #0
 8005358:	4c05      	ldr	r4, [pc, #20]	; (8005370 <_sbrk_r+0x1c>)
 800535a:	4605      	mov	r5, r0
 800535c:	4608      	mov	r0, r1
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	f7fc fc5a 	bl	8001c18 <_sbrk>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_sbrk_r+0x1a>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	b103      	cbz	r3, 800536e <_sbrk_r+0x1a>
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000204 	.word	0x20000204

08005374 <__malloc_lock>:
 8005374:	4770      	bx	lr

08005376 <__malloc_unlock>:
 8005376:	4770      	bx	lr

08005378 <_malloc_usable_size_r>:
 8005378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537c:	1f18      	subs	r0, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	bfbc      	itt	lt
 8005382:	580b      	ldrlt	r3, [r1, r0]
 8005384:	18c0      	addlt	r0, r0, r3
 8005386:	4770      	bx	lr

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
